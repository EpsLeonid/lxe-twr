TITLE "Bunch_Crossing_adjust";

INCLUDE "lpm_shiftreg.inc" ;
INCLUDE "lpm_counter.inc" ;
INCLUDE "Edge_Sensing.inc";

PARAMETERS
(
  Bus_Clock_to_Bunch_Ratio = 8   -- Пользователь здесь указывает соотношение частот, которое он подал на входы 
);
CONSTANT Counter_Size = CEIL(log2 (Bus_Clock_to_Bunch_Ratio))+1;
CONSTANT Half_Cycle = Bus_Clock_to_Bunch_Ratio/2;

SUBDESIGN Bunch_Crossing_adjust
(
-- Module specific signals
	Clock           		: input ;  -- Системный clock
	LinkStartBit			: input = GND ; -- Стартовый бит Медленного Линка
	Sample_Enable			: output;  -- привязанная к стартовому биту частота 12.5 МГц
	Ref_Clock               : output; -- частота привязанная к стартовому биту с 50прц заполнением
-- Standard Bus signaling for Master/Slave connection
	DataBus_In[15..0]		: input;  -- отправляемые с Внутренней Шины в Линк данные
	DataBusOut[15..0]       : output; -- выдаваемые на Внутреннюю Шину из Линка данные
	DataBusStrobe           : input;  -- строб приема/передачи данных наружу (высокий уровень, используя его как Enable, "защелкиваем" по заднему фронту
	Select					: input;  -- Выбор Модуля для работы с памятью Командного Листа в режиме Slave (с КАМАК-ом)
	DirectIn				: input;  -- направление передачи данных, Если =GND, то данный Модуль читается, если =VCC, то пишется.
	--AddrBus_In[3..0]		: input;  -- адрес при операциях доступа чтения/записи Командного Листа с КАМАК-а

)
VARIABLE

Bunch_Rising_Edge			: Edge_Sensing ;
Set_All						: node;
Sample_Enable_CNT			: lpm_counter with (lpm_width=Counter_Size);
Sample_Enable_CNT_Load		: node;
Sample_Enable_          	: node;
Control_Reg    		        : lpm_shiftreg with (lpm_width=16);
D_S_Trig                    : DFF;
Ref_Clk                     : node;

BEGIN  -- Начало описания модуля

Bunch_Rising_Edge.(d, clk)	 =	(LinkStartBit, Clock);
Set_All						 =	Bunch_Rising_Edge.q; -- привязываем фазу к стартовому биту Медленного линка
IF(Sample_Enable_CNT.q[] == Bus_Clock_to_Bunch_Ratio-1 ) -- Main counter
	   THEN Sample_Enable_CNT_Load = VCC; 
	   ELSE Sample_Enable_CNT_Load = GND; 
END IF;
Sample_Enable_CNT.(clock, sclr)	= (Clock, Sample_Enable_CNT_Load OR Set_All);-- Synchronize Main Counter


IF(Sample_Enable_CNT.q[Counter_Size-1..0] == Control_Reg.q[Counter_Size-1..0] ) -- Set relative Phase
			THEN Sample_Enable_ = VCC; 
			ELSE Sample_Enable_ = GND; 
END IF;
Sample_Enable = DFF(.clk=Clock, .d=Sample_Enable_); -- output to  Down_Link timing

IF(Sample_Enable_CNT.q[] < Half_Cycle) -- Main counter
	   THEN Ref_Clk = VCC; 
	   ELSE Ref_Clk = GND; 
END IF;
Ref_Clock = DFF(.clk=Clock, .d=Ref_Clk);		

D_S_Trig.(d,clk) = (DirectIn AND Select, Clock);		
Control_Reg.( data[], clock, enable, load) = (DataBus_In[], Clock, D_S_Trig.q AND DataBusStrobe, VCC);
DataBusOut[] = Control_Reg.q[];

END; -- Конец описания модуля