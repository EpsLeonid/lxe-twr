TITLE "Delay Line";
-- Файл содержит фукцию формирователь задержки импульса и формирователь длительности импульса. 
-- Формирователь имеет минимальную задержку 3 такт входной частоты и 2 такта минимальную длительность

INCLUDE "Edge_Sensing.inc";
INCLUDE "lpm_counter.inc" ;

PARAMETERS
(
  MAX_DELAY = 1000 -- максимальная задержка в тактах
--  RefClock  = 75 -- входная частота
);

--CONSTANT COUNTER_SIZE  =  FLOOR (LOG2(MAX_DELAY))+1; -- определение размера счетчика
CONSTANT COUNTER_SIZE  =  16; -- определение размера счетчика
 
Subdesign Delay_Line
(
       Clock                           : input;   -- Clock
       Reset                           : input;   
       InputPulse                      : input;   
       DelayTime[COUNTER_SIZE-1..0]    : input;
       DurationTime[COUNTER_SIZE-1..0] : input; 

       DelayedPulse                    : output;  
       test1                           : output;
)

Variable

    StartSensing      : Edge_Sensing;
 
    WorkCycle         : SRFF;

	DelayCounter	  : LPM_COUNTER with ( lpm_width=COUNTER_SIZE, lpm_direction="up" );   
    StartPulse        : SRFF;
    EndDelay          : node;
	EndPulse          : node;
	

Begin

StartSensing.(d,clk,clr) = (InputPulse,Clock,WorkCycle.q);


WorkCycle.(S,clk,R) = (StartSensing.q,Clock,EndPulse OR Reset);
StartPulse.(S,clk,R) = (EndDelay,Clock,EndPulse OR Reset);


DelayCounter.(clock,cnt_en,sclr) = (Clock,WorkCycle.q,EndPulse OR Reset);
IF(DelayCounter.q[] == (DelayTime[]-1) ) THEN 
    EndDelay = VCC;
  ELSE
    EndDelay = GND;
END IF;

test1 = EndDelay;

IF(DelayCounter.q[] == (DelayTime[] + DurationTime[]-1) ) THEN 
    EndPulse = VCC;
  ELSE
    EndPulse = GND;
END IF;

 DelayedPulse = StartPulse.q;

end;
