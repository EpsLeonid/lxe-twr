% This Function is BUS Controller (Access Arbiter) for T2Q Project Internal Bus.
This function ONLY regulate how Master device asserts address on Address Lines. Read or Write 
data thorough Data Lines is under Master control. Target devices has to decode address and accept/supply data.  
When Target is READY for transfer, Data Strobe signal is generated to complete the cycle.
%
TITLE "Arbiter";
-- Ver4 28.11.2008

%
This Asyncronouse Interface is intended for data tranfser between devices with different speed of Clock.

Bus access is organized in some steps:
1. Master Device asserts "Bus Access ReQuiest".
2. At positive transitions of CLK supplied to Arbiter "Bus Access GranteD" occuried.
If more than one requiest found, high priority device will be granted first.
3. Master Device which is granted, opens tri-state buffers and thus asserts "Adderess Lines" and "Bus Direction" .
4. At next positive transition of CLK "Address Valid" signal asserted by Arbiter. 
5. Now it's some WaiteStates inserted to address decode by Targets'.
6. When any Target Device recognize it's address, (Address decoded), It asserts signal "Target Ready".
7. At positive transitions of CLK signal "Target Ready" sampled and, if present, 
signal "Data Strobe" generated. "Data Strobe" is 1T of CLK, negative transitions
is the end of transfer cycle.
P.S. 
1. If "Target Ready" not asserted while ClockMaxTimout expered, "Data Strobe" 
will be produced to clear current cycle, "Error" signal generated.
2. If device granted does not remove request after bus cycle completed it 
will be ignored for 1 clock cycle.
This features are to be used at initial system testing, ajusting.
%


INCLUDE "lpm_counter.inc"  ;
INCLUDE "Edge_Sensing_Sync.inc";


PARAMETERS
(
  DeviceMaxNumber = 2, -- Number of Master Devices connected to Bus
  ClockMaxTimout  = 10  -- Maximum clock number until Target Ready
);
ASSERT (ClockMaxTimout>1) and (ClockMaxTimout<60)
	report "Arbiter TimeOut should be 1..60" ;
	 
Subdesign Arbiter
(
  clock                            : input;  -- System clock
  Reset                            : input;  -- Active High

-- HandShake Begin
-- Requestes from Master devices to bus access to 
  BARQ[DeviceMaxNumber-1..0]       : input; 

-- Bus Access Granted 
  BAGD[DeviceMaxNumber-1..0]       : output;

--Negotiation signals
  AddressValid                     : output; -- Target Address Decode
  TargetReady                      : input;  -- Target Device Ready when addr decoded
  DataStrobe                       : output; -- One clock HIGH when Target Ready
-- End of HandShake

  ErrorLight                       : output; -- One clock HIGH when Strobe at Timout 
)

VARIABLE

  BARQ_inBuff[DeviceMaxNumber-1..0]         : DFFE ; -- Input sampling
  BAGD_outBuff[DeviceMaxNumber-1..0]        : DFFE ; -- Output strobed (optional)
  Mask_Buff[DeviceMaxNumber-1..0]           : DFFE ; -- Register_of_Mask


  BARQ_OR, BARQ_OR_[DeviceMaxNumber..0]     : node;
  BAGD_OR, BAGD_OR_[DeviceMaxNumber..0]     : node;
  wire_AND[DeviceMaxNumber-2..0]			: node;                              

  DataStr									: node;
  DataStr_Trig                              : DFF;
  Data_Strobe_Shaper						: Edge_Sensing_Sync ;
  End_Cycle								    : node;
  TimeOutCnt                                : LPM_COUNTER WITH (LPM_WIDTH = 6);
  TimeOut									: NODE;

BEGIN

Defaults 
    wire_AND[] = VCC;  -- доопределяем явно до логической 1
END Defaults;

-- Bus connection begin			
  FOR i IN 0 TO (DeviceMaxNumber-1) GENERATE
     BARQ_inBuff[i].d     = BARQ[i]; 
     BARQ_inBuff[i].clk   = clock;
     BARQ_inBuff[i].clrn  = !Mask_Buff[i].q;

	 BAGD[i]              = BAGD_outBuff[i].q;
	 BAGD_outBuff[i].clk  = clock;
	 BAGD_outBuff[i].clrn = !End_Cycle;

	 Mask_Buff[i].d       = BAGD_outBuff[i].q;
	 Mask_Buff[i].clk     = clock;
	 Mask_Buff[i].ENA     = DataStr_Trig.q;
	 Mask_Buff[i].clrn    = !End_Cycle ;
  END GENERATE;

-- Priority Encoder to ensure single active BAGD
  FOR j IN 0 TO (DeviceMaxNumber-2) GENERATE
     wire_AND[j] = BARQ_inBuff[j].q;
     FOR i IN j TO (DeviceMaxNumber-2) GENERATE
        wire_AND[j] = !BARQ_inBuff[i+1].q;
     END GENERATE;
     IF wire_AND[j] == VCC THEN BAGD_outBuff[j].d = VCC; 
                           ELSE BAGD_outBuff[j].d = GND;
     END IF;
  END GENERATE;

  IF   (BARQ_inBuff[DeviceMaxNumber-1].q == VCC) THEN BAGD_outBuff[DeviceMaxNumber-1].d = VCC;
												 ELSE BAGD_outBuff[DeviceMaxNumber-1].d = GND; 
  END IF; 
-- Bus connection end

-- Inpit sampling control
  BARQ_OR_[0] = GND;
  FOR i IN 0 TO (DeviceMaxNumber-1) GENERATE
     BARQ_OR_[i+1] = BARQ_OR_[i] OR BARQ_inBuff[i];
     BARQ_inBuff[i].ena=!BARQ_OR; -- IF any request exist, stop next sampling
  END GENERATE;
  BARQ_OR = BARQ_OR_[DeviceMaxNumber];

-- Output control
  BAGD_OR_[0] = GND;
  FOR i IN 0 TO (DeviceMaxNumber-1) GENERATE
     BAGD_OR_[i+1] = BAGD_OR_[i] OR BAGD_outBuff[i];
  END GENERATE;
  BAGD_OR = BAGD_OR_[DeviceMaxNumber];

  AddressValid	=	DFF(.d=BAGD_OR, .clk=Clock); -- AddressValid is one clock late of BAGD

-- From "Target Ready" to "Data Strobe" control--Shaping one clock width pulse from positive edge of Target Ready
  Data_Strobe_Shaper.(clk, d, clr)=	(Clock, TargetReady, End_Cycle);
  DataStr = Data_Strobe_Shaper.q OR TimeOut ; -- 

  End_Cycle	 = DFF(.d=DataStr_Trig.q, .clk=Clock, .prn=!Reset);
  DataStrobe = DataStr_Trig.q;
  DataStr_Trig.(d, clk) = (DataStr, Clock);

-- Time_Out Timer: Starts  on "Target Ready" , Cleared at next clock of DataStrobe
  TimeOutCnt.(clock, sclr, cnt_en) = (clock, End_Cycle, AddressValid);-- Count enabled when Address Valid
  TimeOut	=	DFF (.d=(TimeOutCnt.q[] == ClockMaxTimout ), .clk=clock);
  ErrorLight = TimeOut;  -- Error marker for external light

END;