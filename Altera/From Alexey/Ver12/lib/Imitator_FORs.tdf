TITLE "Imitator FOR's";

INCLUDE "lpm_counter.inc" ;
INCLUDE "lpm_shiftreg.inc";
INCLUDE "Edge_Sensing.inc";
INCLUDE "lpm_mux.inc" ;
INCLUDE "FORs_RAM.inc";



CONSTANT WORD_WIDTH       = 16; -- размер слова данных


CONSTANT FOR_Bus_Width = 48;

SUBDESIGN Imitator_FORs
(
-- Module specific signals
	FOR_Sample_Enable			    : input; -- 12.5 МГц частота привязанная к стартовому биту Медленного линка
	-- comes from Phase_Storage to fine time adjust
    Imitator_Out[FOR_Bus_Width-1..0]: output; -- имитационные FOR-ы
    Imitator_Output_Enable			: output; -- выход, служащий для управления tri-state буфферами, соединенными с шинами R и W

-- Project Standard Bus
    DataBus_In[WORD_WIDTH-1..0]     : input;  -- отправляемые с Внутренней Шины в Модуль данные
    DataBusOut[WORD_WIDTH-1..0]     : output; -- выдаваемые на Внутреннюю Шину из Модуля данные 
	Clock           			    : input;  -- входная частота работы модуля 150 МГц
	Bus_Clock                       : input;  -- частота шины проекта 100 МГц
	Reset						    : input = GND;  -- Common FPGA Reset
    DataBusStrobe 			        : input;  -- строб приема/передачи данных наружу (высокий уровень, защелкиваем по заднему фронту)
    Select					        : input;  -- Выбор Модуля для работы с памятью Командного Листа в режиме Slave (с КАМАК-ом)
    DirectIn					    : input;  -- направление передачи данных, Если =GND, то данный Модуль читается, если =VCC, то пишется.
    AddrBus_In[9..0]			    : input;  -- адрес при операциях доступа чтения/записи Командного Листа с КАМАК-а
)

VARIABLE
	Start_Working_Cycle		: node;
	Stop_Working_Cycle		: node;
	Working_Cycle_Flag		: SRFF;
	Timer_Counter			: LPM_COUNTER  with ( lpm_width=WORD_WIDTH);
	Timer_Counter_Reg		: LPM_shiftreg with ( lpm_width=WORD_WIDTH);
	
    RAM[2..0]				: FORs_RAM;
    RAM_Addr_Cnt_a   	    : LPM_COUNTER  with ( lpm_width=8, lpm_direction="UP" );  
    SaveRAM_0               : node;
    SaveRAM_1               : node;
    SaveRAM_2               : node;

    SaveSReg                : node; 
BEGIN

%DEFAULTS
END DEFAULTS;%

--*************** Таймер ***************************
Working_Cycle_Flag.(S,clk,R) = (SaveSReg,Clock,Stop_Working_Cycle);

Timer_Counter.(clock,clk_en,cnt_en,sclr) = (Clock,Working_Cycle_Flag.q AND !Start_Working_Cycle,FOR_Sample_Enable,Stop_Working_Cycle);
IF(Timer_Counter.q[] == Timer_Counter_Reg.q[]) THEN Start_Working_Cycle = VCC;
                                               ELSE Start_Working_Cycle = GND; 
END IF;

--*************** Память ***************************
RAM[0].(address_a[7..0]       , clock_a, data_a[15..0], wren_a) =
       (RAM_Addr_Cnt_a.q[7..0], Clock  , DataBus_In[] ,  GND); 
RAM[1].(address_a[7..0]       , clock_a, data_a[15..0], wren_a) =
       (RAM_Addr_Cnt_a.q[7..0], Clock  , DataBus_In[] ,  GND); 
RAM[2].(address_a[7..0]       , clock_a, data_a[15..0], wren_a) =
       (RAM_Addr_Cnt_a.q[7..0], Clock  , DataBus_In[] ,  GND); 


RAM_Addr_Cnt_a.clock   = Clock;
RAM_Addr_Cnt_a.clk_en  = Start_Working_Cycle;
RAM_Addr_Cnt_a.cnt_en  = FOR_Sample_Enable;
RAM_Addr_Cnt_a.sclr    = Stop_Working_Cycle;
IF(RAM_Addr_Cnt_a.q[] == 255) THEN Stop_Working_Cycle = VCC;
                              ELSE Stop_Working_Cycle = GND;
END IF; 


-- 256 адрес пишем в статусный регистр
IF(AddrBus_In[] == 768)  THEN SaveSReg     = DataBusStrobe and  DirectIn AND Select;
                              DataBusOut[7..0] = Timer_Counter_Reg.q[7..0];
                         ELSE SaveSReg     = GND; 
END IF;
-- с 0..255 адрес пишем в память
IF(AddrBus_In[] >= 0 AND AddrBus_In[] <= 255)   THEN SaveRAM_0 = DataBusStrobe and  DirectIn AND Select;
                                                     DataBusOut[] = RAM[0].q_b[15..0];
                                                ELSE SaveRAM_0 = GND; 
END IF;
IF(AddrBus_In[] >= 256 AND AddrBus_In[] <= 511) THEN SaveRAM_1    = DataBusStrobe and  DirectIn AND Select; 
                                                     DataBusOut[] = RAM[1].q_b[15..0];
                                                ELSE SaveRAM_1 = GND; 
END IF;
IF(AddrBus_In[] >= 512 AND AddrBus_In[] <= 767) THEN SaveRAM_2 = DataBusStrobe and  DirectIn AND Select;
                                                     DataBusOut[] = RAM[2].q_b[15..0];
                                                ELSE SaveRAM_2 = GND; 
END IF;


RAM[0].(address_b[7..0] , clock_b  , data_b[15..0], wren_b) =
       (AddrBus_In[7..0], Bus_Clock, DataBus_In[] , SaveRAM_0); 
RAM[1].(address_b[7..0] , clock_b  , data_b[15..0], wren_b) =
       (AddrBus_In[7..0], Bus_Clock, DataBus_In[] , SaveRAM_1); 
RAM[2].(address_b[7..0] , clock_b  , data_b[15..0], wren_b) =
       (AddrBus_In[7..0], Bus_Clock, DataBus_In[] , SaveRAM_2); 



Timer_Counter_Reg.(data[],clock,enable,load) = (DataBus_In[],Bus_Clock,SaveSReg,VCC);

Imitator_Out[15..0]  = RAM[0].q_a[];
Imitator_Out[23..16] = RAM[2].q_a[7..0];
Imitator_Out[39..24] = RAM[1].q_a[];
Imitator_Out[47..40] = RAM[2].q_a[15..8];
Imitator_Output_Enable = Start_Working_Cycle;

END; -- End design
