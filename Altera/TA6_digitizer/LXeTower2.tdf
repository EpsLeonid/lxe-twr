Title "LXeTower";

INCLUDE "lpm_shiftreg.inc" ;
INCLUDE "lpm_counter.inc" ;
INCLUDE	"lpm_add_sub.inc";
INCLUDE "lpm_divide.inc";
--INCLUDE	"Edge_Sensing_Sync.inc";
INCLUDE	"SUM_16.inc";
INCLUDE	"RAM_digit.inc";
INCLUDE	"hist_ram.inc";
INCLUDE	"im_ram.inc";
INCLUDE	"test_ram.inc";

CONSTANT	ADC_WIDTH = 10;	-- Кол-во битов АЦП
CONSTANT	REG_SUM = 16;	-- Кол-во регистров для суммирования
CONSTANT    MaxTime = 210;  -- Maximal Valid time (2mks)

-- Only test --
--Constant	Piedistal_Reg = b"0000010100";
--Constant	Threshold_Reg = 50;
---------------

SUBDESIGN  LXeTower
(
-- General Signals
        	DigitInit               : input; -- initiates a Cycle of data processing (Temporary!)
			ADC_Clock				: input; -- Global FPGA Clock, assumed 100MHz for project 
			Bus_Clock				: input; -- Global FPGA Clock, assumed 100MHz for project 
			Reset					: input; -- Common FPGA Reset
			DataBus_In[15..0]		: input; -- отправляемые с Внутренней Шины в Линк данные
--			Event					: input; -- такт конвеера
--			LinkMsg					: input; -- сигнал о работе линка (общий стоп)
			DataBusOut[15..0]       : output; -- выдаваемые на Внутреннюю Шину из памяти данные
			Working					: output;
--			Start_read				: output;
--			EventFound				: OUTPUT; -- сигнал об обнаружении нужного события		

--			Error                   : output; -- сигнал ошибки (неверная команда)
%	-- Master Mode Signals -- используется при работе данного Модуля в режиме Master)
	AccessRequest           : output; -- запрос к Арбитру на доступ к шине для чтения/записи данных Пользователя в режиме Master	
	AccessGranted			: input;  -- Разрешение Арбитра выставить Адрес и направление обмена (захват шины)
	DirectOut				: output; -- направление передачи данных, на внутреннюю шину или с нее, по умолчанию =GND, передача от внутренних ресурсов платы Модуль,
	AddrBusOut[15..0]       : output; -- адрес при операциях доступа ко внутренним ресурсам Оцифровщика (чтения/записи по Командному Листу).
%		-- Slave Mode Signals	-- используется при работе данного Модуля в режиме Slave
		Select					: input;  -- Выбор Модуля для работы с памятью Командного Листа в режиме Slave (с КАМАК-ом)
		DirectIn				: input;  -- направление передачи данных, Если =GND, то данный Модуль читается, если =VCC, то пишется.
		AddrBus_In[9..0]		: input;  -- адрес при операциях доступа чтения/записи Командного Листа с КАМАК-а
		DataBusStrobe           : input;  -- строб приема/передачи данных наружу (высокий уровень, используя его как Enable, "защелкиваем" по заднему фронту

	Sample[13..0]				: output;
	Summ[13..0]					: output;
	Subtr[13..0]	            : output;
	Zero[13..0]					: output;
	test1,test2,test3,
	test4[13..0],test5[13..0],
	test6[13..0],test7[13..0],
	test8[9..0]					: output ; -- to be conected to test output of main Project 
)

VARIABLE

--********  Cycle proceeding units  ********
-- Cycle initiation circuitry
	DigitInit1				: node; -- stretcher of "DigitInit" signal
	DigitInit2,
	DigitInit3				: node; -- 2-clock _/^^\_ in the beginning of Cycle
--	Working					: node; -- Flag: Cycle in progress, declared as Output
	InitSet					: node; -- 1-clock _/^\_ for initializing the counters
	DigitEnd				: node; -- _/^^\_ at the end of Loading Cycle

-- Main Counter of Digitization: counts #_of_Step, defines all control signals' states
	DigitCt					: LPM_COUNTER with ( lpm_width=14, lpm_direction="up" );

--********  Data Processing circuitry  ********
-- RAM which imitates the ADC
	Im_ADC					:	im_ram;
	Im_ADCCt				:	LPM_COUNTER with (lpm_width = 8, lpm_direction="up" ); -- счетчик 
--	Im_RAMAddrBus[7..0]		:	node;

	Hist_ADC				:	hist_ram;
	Hist_ADCCt				:	LPM_COUNTER with (lpm_width = 8, lpm_direction="up" ); -- счетчик 
--	Hist_RAMAddrBus[7..0]	:	node;

	Test_ADC				:	test_ram;
	Test_ADCCt				:	LPM_COUNTER with (lpm_width = 8, lpm_direction="up" ); -- счетчик 
		
	Ram_Sel[2..0]			:	node; -- мультиплексор для выбора обращения к памятям

	Threshold_Reg		:		lpm_shiftreg with (LPM_WIDTH = 14, LPM_DIRECTION="unused"); -- регистр уровня порога
	SaveTReg			:		node;
	Piedistal_Reg		:		lpm_shiftreg with (LPM_WIDTH = 10, LPM_DIRECTION="unused"); -- регистр уровня порога
	SavePReg			:		node;

--	Sum_ped[13..0]		:		node;
	Sub_Ped				:		lpm_add_sub with (lpm_width = 10, lpm_direction="sub", 
												  Lpm_pipeline = 1 );

	RegSum[REG_SUM-1..0]:		lpm_shiftreg with (LPM_WIDTH = ADC_WIDTH, LPM_DIRECTION="unused"); -- регистр входных данных 
	SUMMATOR			:		SUM_16;	 -- Сумматор на 16 слагаемых
--	SUMM[13..0]			:		node;
--	Average_Reg			:		lpm_shiftreg with (LPM_WIDTH = ADC_WIDTH, LPM_DIRECTION="unused"); -- регистр усредненных значений
--	Aver_Reg			:		lpm_shiftreg with (LPM_WIDTH = REG_SUM, LPM_DIRECTION="unused"); -- регистр усредненных значений деленных на 4

	SampleRAM			:		RAM_digit with (LPM_WIDTH = REG_SUM, LPM_DIRECTION="unused"); -- память иммитирующая линию задержки сэмплов
	SampleRAM_AddrCnt1	:		LPM_COUNTER with (lpm_width = 8, lpm_direction="up" ); -- счетчик 
	SampleRAM_AddrCnt2	:		LPM_COUNTER with (lpm_width = 8, lpm_direction="up" ); -- счетчик 
--	Delay_AddrCt2		:		LPM_COUNTER with (lpm_width = 8, lpm_direction="up" ); -- счетчик 
	DelayTime_Reg		:		lpm_shiftreg with (LPM_WIDTH = 8, LPM_DIRECTION="unused", LPM_SVALUE = B"00001010"); -- регистр значения задержки

    SUB					:		lpm_add_sub with (lpm_width = REG_SUM-2, lpm_direction="sub", 
												  Lpm_pipeline = 1 ); -- сумматор выполняющий фунцию вычитателя сигналов

	DigitZero,DigitZero1,
	DigitZero2,DigitZero3:		DFFE;

	RegZero[REG_SUM-1..0]:		lpm_shiftreg with (LPM_WIDTH = 14, LPM_DIRECTION="unused"); -- регистр входных данных 
	RegZero_Del			:		lpm_shiftreg with (LPM_WIDTH = 14, LPM_DIRECTION="unused"); -- регистр входных данных 
	Div1[13..0]			:		node;
	Div2				:		lpm_add_sub with (lpm_width = 14, lpm_direction="sub", 
												  Lpm_pipeline = 1 ); -- сумматор выполняющий фунцию вычитателя сигналов
	Zero_div			:		lpm_divide	with (LPM_WIDTHN = 14, LPM_WIDTHD = 14, Lpm_pipeline = 4);
	Reg_Zero			:		lpm_shiftreg with (LPM_WIDTH = 14, LPM_DIRECTION="unused"); -- регистр входных данных 

--	DelayAver_Reg		:		lpm_shiftreg with (LPM_WIDTH = ADC_WIDTH, LPM_DIRECTION="unused"); -- регистр данных с усредненными задержанными на 1 такт сэмплами  

--	SUMPed[REG_SUM-5..0]:		node;

	T_Trig				:		SRFF; -- флаг определения порога
	Zero_Trig			:		SRFF; -- флаг пересечения нуля
--	Max_Trig			:		SRFF; -- флаг определения максимума

--	Value_AddrCt2		:		node;
	Value_Th			:		node; -- сигнал о превышении порога (стоит пока порог превышен)
	ZeroFound			:		node; -- сигнал о пересечении разности нуля (тройного пъедистала)
	EvTimeClr			:		node; -- сброс счетчика клоков

	EvTimeCt			:		LPM_COUNTER with (lpm_width=14, lpm_direction="up" ); -- счетчик клоков с момента нахождения порога 
																					 --до появления сигнала от ССД

%	Value_Max_Done		:		node; -- сигнал об обнаружении изменения знака разницы между предыдущими и текущими сэмплами
	ENDthrFound			:		node; -- 
	ENDthr[13..0]		:		node;
	
	Max_Reg				:		lpm_shiftreg with (LPM_WIDTH = ADC_WIDTH, LPM_DIRECTION="unused"); -- регистр данных (амплитуда)
%
	NSampleCt			:		LPM_COUNTER with (lpm_width=10, lpm_direction="up" ); -- счетчик 

--	AllReset			:		SRFF; -- общий сброс
	TimeOutSch			:		node;
--	ENDCycle			:		node;


BEGIN

DEFAULTS

--	Value_AddrCt2		= GND;
	Value_Th			= GND;
	SampleRAM.data_a[]	= 0; --     Out_Data[] = 0;
	ZeroFound			= GND;
	EvTimeClr			= GND;
	TimeOutSch			= GND;
%	Value_Max_Done		= GND;
	EventFound			= GND;
	ENDthrFound 		= GND;
	ENDCycle 			= GND;
	Start_read 			= GND;
%
END DEFAULTS;

--============================================================================
--************ Cycle proceeding units ****************************************
-- Digitizing_Cycle Initializing Circuitry 
DigitInit1  = SRFF(.prn=!(DigitInit & !DigitInit2 & !Working),  --\ "DigitInit" 
                   .s=GND, .clk=ADC_Clock, .r=DigitInit2,           -- > stretcher
                   .clrn=!Reset);                               --/
--DigitInit2  = SRFF(.s=(DigitInit1 AND Sync),                -- aligned to PHASE
--                   .clk=Clock, .r=DigitInit3,.clrn=!Reset); -- 2-clock _/^^^\_
DigitInit2  = DFF (.d=DigitInit1, .clk=ADC_Clock,.clrn=!Reset); -- 2-clock   _/^^^\_
DigitInit3  = DFF (.d=DigitInit2, .clk=ADC_Clock,.clrn=!Reset); -- 2-clock     _/^^^\_

Working     = SRFF(.s=DigitInit2,.clk=ADC_Clock, .r=DigitEnd,   -- level       _/^^^^  ^^^^\_
                   .clrn=!Reset);
InitSet     = DigitInit3 AND DigitInit2 ;                   	-- 1-clock     _/^^\_

--******** Main Counter of Digitization: *************************************
--   counts #_of_Clock, defines all control signals' states
DigitCt.(clock, sclr, clk_en, cnt_en) = (ADC_Clock, InitSet, VCC, Working); -- sets to #00 in the Beg-g_of_Cycle

IF ( DigitCt.q[] == MaxTime )   -- 
    Then  DigitEnd   = VCC;     --
End IF;

--============================================================================
-- Im_ADC - a RAM which contains data substituted for the ADC data (Тестовая память для проверки алгоритма)
	Im_ADC.data_a[] = GND;
	Im_ADC.(address_a[], clock_a, wren_a) = (Im_ADCCt.q[7..0], ADC_Clock, GND);
	
--	Im_ADC.(data_b[],address_b[], clock_b)= (DataBus_In[],Im_RAMAddrBus[7..0], Bus_clock);
	Im_ADC.(data_b[],address_b[], clock_b)= (DataBus_In[],AddrBus_In[7..0], Bus_clock);
	Im_ADC.wren_b = DataBusStrobe and  DirectIn AND Select AND Ram_SeL[0];
	
	Im_ADCCt.clock   = ADC_Clock;
	Im_ADCCt.sclr = !Working;
--	Im_ADCCt.clk_en  = VCC;
--	Im_ADCCt.cnt_en = GN;
--	Im_RAMAddrBus[7..0] = AddrBus_In[7..0] + Im_ADCCt.q[7..0]; -- выставление адреса в 0 для текущего набора FOR-ов

--============================================================================
--********** АЛГОРИТМ **************--

	SUB_Ped.(dataa[9..0], datab[9..0]) = (Im_ADC.q_a[9..0], Piedistal_Reg.q[9..0]);
	SUB_ped.(clock, clken) = (ADC_Clock, Working);

	RegSum[0].(data[9..0],clock,load,enable) = (SUB_Ped.result[9..0], ADC_Clock, VCC, VCC);

for i in 0 to REG_SUM-2 generate
	RegSum[i+1].(data[9..0],clock,load,enable) = (RegSum[i].q[], ADC_Clock, VCC, VCC );
end generate;

	SUMMATOR.clock = ADC_Clock;
	SUMMATOR.(data0x[], data1x[], data2x[], data3x[],
              data4x[], data5x[], data6x[], data7x[],
              data8x[], data9x[], data10x[],data11x[],
              data12x[],data13x[],data14x[],data15x[]) = 
			 (RegSum[ 0].q[],RegSum[ 1].q[],RegSum[ 2].q[],RegSum[ 3].q[],
			  RegSum[ 4].q[],RegSum[ 5].q[],RegSum[ 6].q[],RegSum[ 7].q[],
			  RegSum[ 8].q[],RegSum[ 9].q[],RegSum[10].q[],RegSum[11].q[],
			  RegSum[12].q[],RegSum[13].q[],RegSum[14].q[],RegSum[15].q[]);

	SUMM[] = SUMMATOR.result[REG_SUM-3..0]; -- 14-битовое усредненное словоы

-----------------------------------------------------------
---- Определение и запись значений пьедистала и порога ----

	Piedistal_Reg.(data[], clock, enable, load) = (DataBus_In[ADC_WIDTH-1..0], ADC_Clock, SavePReg, VCC);
	Threshold_Reg.(data[], clock, enable, load) = (DataBus_In[13..0], ADC_Clock, SaveTReg, VCC);

-- 21248 адрес регистра пъедистала
IF(AddrBus_In[] == 770)  THEN SavePReg					= DataBusStrobe and  DirectIn AND Select;
                              DataBusOut[ADC_WIDTH-1..0] = Piedistal_Reg.q[];
							  DataBusOut[15..10] = GND;
                         ELSE SavePReg					= GND; 
END IF;
-- 21249 адрес регистра порога
IF(AddrBus_In[] == 771)  THEN SaveTReg					= DataBusStrobe and  DirectIn AND Select;
                              DataBusOut[13..0] = Threshold_Reg.q[];
							  DataBusOut[15..14] = GND;
                         ELSE SaveTReg					= GND; 
END IF;
-----------------------------------------------------------

IF((SUMM[] > Threshold_Reg.q[]) AND (T_Trig.q == GND) AND (Reset == GND)) THEN  Value_Th = VCC; -- сигнал о превышении порога
																			 ELSE  Value_Th = GND;
END IF; 
	T_Trig.(S,clk,R) = (Value_Th, ADC_Clock, Reset); -- флаг превышения порога

	EvTimeCt.(clock,cnt_en,sclr,clk_en) = (ADC_Clock, T_Trig.q, EvTimeClr, VCC ); -- счетчик клоков от пересечения порога
IF (EvTimeCt.q[] == MaxTime) THEN EvTimeClr = VCC;
							 ELSE EvTimeClr = GND;
END IF;

--*************** "Constant-Fraction Discriminator" section *******************************
-- Запись и определение памяти
	SampleRAM.data_a[13..0] = SUMM[];
	SampleRAM.data_a[15..14]= GND;
	SampleRAM.address_a[7..0] = SampleRAM_AddrCnt1.q[];
	SampleRAM.data_b[15..0]	= GND;
	SampleRAM.address_b[7..0] = SampleRAM_AddrCnt2.q[];
	SampleRAM.(wren_a, wren_b, clock) = (Working , GND , ADC_Clock);

--	SampleRAM_AddrCnt1.(clock, clk_en, cnt_en) = (ADC_Clock, VCC, Working );
	SampleRAM_AddrCnt1.sload = InitSet;
	SampleRAM_AddrCnt1.data[] = DelayTime_Reg.q[];  -- AddrCt1 runs by "Delay" steps in forward of AddrCt2
	SampleRAM_AddrCnt1.clock   = ADC_Clock;
	SampleRAM_AddrCnt1.sclr = !Working;

--	SampleRAM_AddrCnt2.(clock, clk_en, cnt_en) = (ADC_Clock, VCC, Working );
--	SampleRAM_AddrCnt2.sload = Working;
	SampleRAM_AddrCnt2.clock   = ADC_Clock;
	SampleRAM_AddrCnt2.sclr = !Working;
	
	DelayTime_Reg.(clock, enable, sset) = (ADC_Clock, Working, VCC);

--=====Поиск пересечения нуля=====--
%	Aver_Reg.(clock,enable,load,sclr)  = (ADC_Clock, Working , VCC, Reset);
	Aver_Reg.data[11..0] = SUMM[13..2]; -- (Незадержанный сигнал / 4), по сути сдвиг на 2 бита
	Aver_Reg.data[13..12] = GND;
%--  (Незадержанный сигнал / 4) - Задержанный сигнал 
	SUB.(dataa[], datab[]) = ((GND, GND, SUMM[13..2]), SampleRAM.q_b[13..0]);
	SUB.(clock, clken) = (ADC_Clock, Working);
	
	RegZero[0].(data[13..0],clock,load,enable) = (SUB.result[13..0], ADC_Clock, VCC, VCC);

for i in 0 to REG_SUM-2 generate
	RegZero[i+1].(data[13..0],clock,load,enable) = (RegZero[i].q[], ADC_Clock, VCC, VCC );
end generate;

IF ((RegZero[7].q[13..7] == b"1111111") --AND (SubtrResult[] < SUMPed[])
	AND (T_Trig.q == VCC) AND (Zero_Trig.q == GND))  

								THEN ZeroFound = VCC; -- сигнал пересечения разностью нуля (тройного пъедистала)
	
--		Zero[] = - (((RegZero[0].q[]*(EvTimeCt.q[] - 7)) - (RegZero[15].q[]*(EvTimeCt.q[] + 8)))/
--					(RegZero[15].q[] - RegZero[0].q[]));
	
								ELSE ZeroFound = GND;
END IF;										
	
	Zero_Trig.(S,clk,R) = (ZeroFound,ADC_Clock,Reset);	-- флаг пересечения нуля

	RegZero_Del.(data[], clock, load, enable) = (RegZero[15].q[], ADC_Clock, T_Trig.q, Working);
	Div1[13..4] = RegZero_Del.q[9..0];                           -- \ Chislitel = D(x1) * 16
	Div1[3..0] = GND;                                            -- / 
	Div2.(dataa[], datab[]) = (RegZero[15].q[],RegZero[0].q[]);  --   Znamenatel = D(x2)-D(x1)
	Div2.(clock, clken) = (ADC_Clock, Working);

DigitZero.(d, clk, clrn) = (ZeroFound, ADC_Clock, !DigitZero2.q); -- 2-clock   _/^^^\_
DigitZero1.(d, clk, clrn) = (DigitZero.q, ADC_Clock, !DigitZero2.q); -- 2-clock   _/^^^\_
DigitZero2.(d, clk, clrn) = (DigitZero1.q, ADC_Clock, !Reset); -- 2-clock   _/^^^\_
DigitZero3.(d, clk, clrn) = (DigitZero2.q, ADC_Clock, !Reset); -- 2-clock   _/^^^\_

Zero_div.(numer[],              denom[],                     clock,     clken,  aclr) = 
        (Threshold_Reg.q[13..0],(GND,GND,GND,GND,GND,GND,Piedistal_Reg.q[7..0]), ADC_Clock, Select, !Working);

	Reg_Zero.(data[], clock, load, enable) = (Zero[], ADC_Clock, T_Trig.q, DigitZero1.q);
	
	Zero[] = Zero_div.quotient[];

	NSampleCt.(clock,cnt_en,sclr,clk_en) = (ADC_Clock, T_Trig.q, TimeOutSch, Working );

--only for test
	test1 = T_Trig.q;
	test2 = Zero_Trig.q;
	test3 = DigitZero2.q;
	test4[] = Div1[13..0];
	test5[] = RegZero[0].q[];
	test6[] = Div2.result[];
	test7[] = Reg_Zero.q[];
	test8[] = NSampleCt.q[];
		Sample[13..0] = Zero_div.remain[];
		Subtr[] = SUB.result[13..0];
--		Zero[] = RegZero[7].q[];

-----------------------------------------------------------
-- Тестовая память для проверки данных --

	Test_ADC.data_a[13..0] = SUB.result[];
	Test_ADC.data_a[15..14] = GND;
	Test_ADC.(address_a[], clock_a, wren_a) = (Test_ADCCt.q[7..0], ADC_Clock, Working);
	
	Test_ADC.(data_b[],address_b[], clock_b)= (DataBus_In[15..0],AddrBus_In[7..0], Bus_clock);
	Test_ADC.wren_b = DataBusStrobe and  DirectIn AND Select AND Ram_SeL[2];
	
	Test_ADCCt.clock   = ADC_Clock;
	Test_ADCCt.sclr = !Working;

-----------------------------------------------------------

%
--=====Поиск Амплитуды=====--
-- определяем максимум

	DelayAver_Reg.data[]  = SUMM[];
	DelayAver_Reg.(clock,enable,load,sclr)= (ADC_Clock, Working  AND T_Trig.q, VCC, Reset);

IF((SUMM[] < DelayAver_Reg.q[]) AND (T_Trig.q == VCC) AND (Max_Trig.q == GND)) THEN  Value_Max_Done = VCC;
                                                                               ELSE  Value_Max_Done = GND;
END IF;
	Max_Trig.(S,clk,R) = (Value_Max_Done, ADC_Clock, Reset); -- флаг определения максимума
	Max_Reg.(data[],clock,enable,load) = (RegSum[15].q[],ADC_Clock,Value_Max_Done,VCC);

IF ((Value_Th == VCC) AND (Value_Max_Done == VCC) AND (ZeroFound == VCC))
		THEN EventFound = VCC;
		ELSE EventFound = GND;
END IF;%
--=========================================================================================
--===== Cycle proceeding control =====--
-- Main Counter
%
-- Общий сброс
-- максимальное время в течении которого ищем пороги и затем стоят флаги найденных порогов
IF(( NSampleCt.q[] >= MaxTime) AND ((Max_Trig.q == GND) AND (Zero_Trig.q == GND))) THEN TimeOutSch = VCC; 
																						 ELSE TimeOutSch = GND; 
END IF;

--IF ((SUMM[] < ENDthr[])) THEN ENDthrFound = VCC; -- поиск малого порога на разрешение работы цикла заново
IF ((SUMM[] < Threshold_Reg.q[])) THEN ENDthrFound = VCC; -- поиск малого порога на разрешение работы цикла заново
								  ELSE ENDthrFound = GND;
END IF;

--	ENDthr[11..0] = Threshold[13..2];
	
IF ((Max_Trig.q == VCC) AND (Zero_Trig.q == VCC)) THEN ENDCycle = VCC; -- флаг окончание работы цикла
											      ELSE ENDCycle = GND;
END IF;

	AllReset.S = TimeOutSch OR ENDCycle OR Reset;
	AllReset.clk = ADC_Clock;
	AllReset.R = ENDthrFound AND AllReset.q; -- работа разрешается после пересечения малого порога при уменьшении сигнала
%
-- Память истории, данных с АЦП
	Hist_ADC.data_a[15..14] = GND;
	Hist_ADC.data_a[13..0] = SUMMATOR.result[];
	Hist_ADC.(address_a[], clock_a, wren_a) = (Hist_ADCCt.q[7..0], ADC_clock, Working);
	
--	Hist_ADC.(data_b[],address_b[], clock_b)= (DataBus_In[],Hist_RAMAddrBus[7..0], Bus_clock);
	Hist_ADC.(data_b[],address_b[], clock_b)= (DataBus_In[],AddrBus_In[7..0], Bus_clock);
	Hist_ADC.wren_b = DataBusStrobe and  DirectIn AND Select AND Ram_Sel[1];
	
	Hist_ADCCt.clock   = ADC_Clock;
	Hist_ADCCt.sclr = !Working;
--	Hist_ADCCt.clk_en  = VCC;
--	Hist_ADCCt.cnt_en = VCC;
--	Hist_RAMAddrBus[7..0] = AddrBus_In[7..0] + Hist_ADCCt.q[7..0]; -- выставление адреса в 0 для текущего набора FOR-ов

-- 20480 - 20735 начальный адрес "памяти истории"
IF(AddrBus_In[] >= 0 AND AddrBus_In[] <= 255)   THEN DataBusOut[15..0] = Hist_ADC.q_b[]; RAM_Sel[1] = VCC;
                                                ELSE RAM_Sel[1] = GND;
END IF;
-- 20736 - 20991 начальный адрес памяти иммитирующей данные АЦП
IF(AddrBus_In[] >= 256 AND AddrBus_In[] <= 511)  THEN DataBusOut[15..0] = Im_ADC.q_b[]; RAM_Sel[0] = VCC;
												 ELSE RAM_Sel[0] = GND;
END IF;
-- 20992 - 21247
IF(AddrBus_In[] >= 512 AND AddrBus_In[] <= 767)  THEN DataBusOut[] = Test_ADC.q_b[]; RAM_Sel[2] = VCC;
												 ELSE RAM_Sel[2] = GND;
END IF;

--	Start_read = Im_ADC.q_a[15];
	
END;