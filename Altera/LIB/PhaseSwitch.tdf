TITLE "Phase_Switch";
-- This file contains a function for automatic switching between the clock 
-- generated by the local Quartz and the external clock 
-- Fmax       = 26000 ; -- Upper limit in kHz
-- Fmin       = 24000 ; -- Lower limit in kHz
-- RefClock   = 25000 ; -- Local Quartz Frequency in kHz
-- For information:  F(LinkClk) = 2* F(VEPP's phase) = 24.64MHz

INCLUDE "lpm_counter.inc" ;

PARAMETERS
(
Fmax        = 28000,--25600 ,   -- Upper limit in kHz
Fmin        = 21000,--24000 ,   -- Lower limit in kHz
RefClock    = 25000     -- Local Quartz Freq(kHz) used as the reference
);

SUBDESIGN  PhaseSwitch
(
clock           : input;    -- reference clock from local Quartz
LinkClk         : input;    -- Input of the Link's clock "Phase0"
Reset           : input;    -- main project Reset, active High
	
Phase25         : output;   -- Output of the selected clock
LinkClk_Selected: output;   -- Signal indicates what Clk source is selected
Test[4..1]      : output;
)

VARIABLE 

--	ClockDivider[1..0]  : DFF;
RefTimeCt       : LPM_COUNTER with (LPM_WIDTH = 16,	LPM_DIRECTION = "Up");
LinkClkCt       : LPM_COUNTER with (LPM_WIDTH = 16,	LPM_DIRECTION = "Up");

RefTimeZero,
LinkClkZero     : node;

CycleEnd        : node;
EndTrig[4..1]   : node;
Fnorm,
FnormTrig       : node;

BEGIN

--============================================================================
--************  Frequency comparator  ****************************************
-- Base time interval :
RefTimeCt.clock = clock ;
RefTimeCt.sclr  = EndTrig4 OR Reset ;

IF (RefTimeCt.q[15..0] == RefClock)     -- Base time interval, 25000 <=> 1ms 
    Then  CycleEnd = VCC;
    Else  CycleEnd = GND;
End IF;
EndTrig1= SRFF(.S=CycleEnd, .clk=clock, -- 2-clk _/^^\_ on "End of Cycle"
                --.R=EndTrig4, .clrn=!Reset);
                .R=(!RefTimeZero AND !LinkClkZero), .clrn=!Reset);
EndTrig2= DFF (.D=EndTrig1, .clk=clock, .clrn=!Reset);
EndTrig3= DFF (.D=EndTrig2, .clk=clock, .clrn=!Reset);
EndTrig4= DFF (.D=EndTrig3, .clk=clock, .clrn=!Reset);

RefTimeZero = DFF(.D=(RefTimeCt.q15 # RefTimeCt.q14 # RefTimeCt.q13 # RefTimeCt.q12 
                    # RefTimeCt.q11 # RefTimeCt.q10 # RefTimeCt.q9  # RefTimeCt.q8  
                    # RefTimeCt.q7  # RefTimeCt.q6  # RefTimeCt.q5  # RefTimeCt.q4  
                    # RefTimeCt.q3  # RefTimeCt.q2  # RefTimeCt.q1  # RefTimeCt.q0 ),
                  .clk=Clock );

LinkClkZero = DFF(.D=(LinkClkCt.q15 # LinkClkCt.q14 # LinkClkCt.q13 # LinkClkCt.q12 
                    # LinkClkCt.q11 # LinkClkCt.q10 # LinkClkCt.q9  # LinkClkCt.q8  
                    # LinkClkCt.q7  # LinkClkCt.q6  # LinkClkCt.q5  # LinkClkCt.q4  
                    # LinkClkCt.q3  # LinkClkCt.q2  # LinkClkCt.q1  # LinkClkCt.q0 ),
                  .clk=LinkClk );

-- Count the external clock frequency, in Base time interval :
LinkClkCt.clock = LinkClk ;
LinkClkCt.sclr  = DFF(.D=(EndTrig4 OR Reset), .clk=LinkClk) ;

IF ( (LinkClkCt.q[15..0] > Fmin) AND (LinkClkCt.q[15..0] < Fmax) )
    Then  Fnorm = VCC;
    Else  Fnorm = GND;
End IF;                 -- important: to avoid registration of an improper value, ..
FnormTrig   = DFFE(.D=Fnorm, .clk=LinkClk,            -- .. clock must be = LinkClk !
                .ena=DFF(.D=!EndTrig1, .clk=LinkClk), -- .. clock must be = LinkClk !
                .clrn=!Reset); 

LinkClk_Selected = DFF(.D=FnormTrig, .clk = EndTrig3, .clrn=!Reset);

--============================================================================
-- MUX of clock signals : 
Phase25 = ((LinkClk and LinkClk_Selected) OR (Clock and !LinkClk_Selected));

Test1 = FnormTrig;
Test2 = EndTrig1;
Test3 = EndTrig3;
Test4 = LinkClkZero;

END;