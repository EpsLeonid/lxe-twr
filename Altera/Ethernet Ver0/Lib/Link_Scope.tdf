TITLE "Link_Scope";

INCLUDE "lpm_shiftreg.inc" ;
INCLUDE "lpm_counter.inc" ;

SUBDESIGN Link_Scope
(
-- Module specific signals
	-- Входные данные
	Data_Line_h,  Data_Line_l				: input = GND ; -- Стартовый бит C-Link
	Reference_Clock_h, Reference_Clock_l	: input = GND ; -- Опорная частота C-Link
	Sampling_Enable[3..0]					: input = GND ; -- Сигналы защелкивания данных в регистры, быстрые линки и пр.
	-- Управление
	Cavity_Clock	                        : input ;       -- Глобальный синхросигнал
	Event_in_Progress						: input ; 		-- Событие в плате, привязанное на Cavity_Clock
	BC_Adjust_Error							: input = GND ; -- Сигнал ошибки привязки Bunch_Crossing, возникает, если счетчик фазы
															-- не оказался в 0 к моменту прихода следующего события
--	BC_Sampling_Edge_Select					: output;		-- Выбор "хорошей" версии 
	Bunch_Crossing_Selected					: output;		-- Автоматически или вручную выбранная версия Bunch_Crossing для использования
															-- в модуле Bunch_Crossing_adjust
	
-- Standard Bus signaling for Master/Slave connection
	BusClock				                : input;  -- Global FPGA Clock, assumed 100MHz
	DataBus_In[15..0]		                : input;  -- отправляемые с Внутренней Шины в Линк данные
	DataBusOut[15..0]                       : output; -- выдаваемые на Внутреннюю Шину из Линка данные
	DataBusStrobe                           : input;  -- строб приема/передачи данных наружу (высокий уровень, используя его как Enable, "защелкиваем" по заднему фронту
	Select				                 	: input;  -- Выбор Модуля для работы с памятью Командного Листа в режиме Slave (с КАМАК-ом)
	DirectIn				                : input;  -- направление передачи данных, Если =GND, то данный Модуль читается, если =VCC, то пишется.
	AddrBus_In[7..0]	                    : input;  -- адрес при операциях доступа чтения/записи Командного Листа с КАМАК-а

)
VARIABLE


    --Control_Reg[Number_of_Channel-1..0]		        : lpm_shiftreg with (lpm_width=16);
    CSR				       							: lpm_shiftreg with (lpm_width = 16 );
    CSR_enable										: node;
	--- Digital Oscilloscope of Link Phase & Data lines
	Phase_Scope_Reg_h, Phase_Scope_Reg_l			: lpm_shiftreg with (LPM_WIDTH = 16 );
	Data_Scope_Reg_h,  Data_Scope_Reg_l				: lpm_shiftreg with (LPM_WIDTH = 16 );
	
	Sampling_Enable_Reg[3..0]						: lpm_shiftreg with (LPM_WIDTH = 16 );
    nEvent_in_Progress_                             : node;
 
BEGIN

DEFAULTS
	CSR_enable		= GND;
	DataBusOut[]	= GND;
END DEFAULTS;

--Error	=	DFF(.clk=Cavity_Clock, .d= (!Sample_Enable_CNT_Load) AND Set_All); -- Correction pulse from Bunch_Rising_Edge MUST coincidence with self reset



Phase_Scope_Reg_h.(clock, shiftin, enable) = (Cavity_Clock, Reference_Clock_h,nEvent_in_Progress_);
Data_Scope_Reg_h.(clock, shiftin, enable)  = (Cavity_Clock, Data_Line_h, nEvent_in_Progress_);
Phase_Scope_Reg_l.(clock, shiftin, enable) = (Cavity_Clock, Reference_Clock_l,nEvent_in_Progress_);
Data_Scope_Reg_l.(clock, shiftin, enable)  = (Cavity_Clock, Data_Line_l, nEvent_in_Progress_);

nEvent_in_Progress_	=	Global(DFF(.clk=Cavity_Clock, .d=!Event_in_Progress));

Bunch_Crossing_Selected 	=	(Data_Line_h and !CSR.q[0]) OR (Data_Line_l and CSR.q[0]);


FOR i IN 0 to 3 GENERATE
	Sampling_Enable_Reg[i].(clock, shiftin, enable)  = (Cavity_Clock, Sampling_Enable[i], nEvent_in_Progress_);
END GENERATE;

CSR.(clock, data[], enable)	=	(BusClock, DataBus_In[15..0], CSR_enable);

CASE AddrBus_In[7..0] IS
	WHEN 0 =>	DataBusOut[15..0]   =	Phase_Scope_Reg_h.q[];
	WHEN 1 =>	DataBusOut[15..0]   =	Phase_Scope_Reg_l.q[];
	WHEN 2 =>	DataBusOut[15..0]   =	Data_Scope_Reg_h.q[];
	WHEN 3 =>	DataBusOut[15..0]   =	Data_Scope_Reg_l.q[];
	
	WHEN 7 =>	DataBusOut[15..0]   =	CSR.q[]; CSR_enable=(Select AND DirectIn AND DataBusStrobe);
	
	WHEN 8 =>	DataBusOut[15..0]   =	Sampling_Enable_Reg[0].q[];
	WHEN 9 =>	DataBusOut[15..0]   =	Sampling_Enable_Reg[1].q[];
	WHEN 10 =>	DataBusOut[15..0]   =	Sampling_Enable_Reg[2].q[];
	WHEN 11 =>	DataBusOut[15..0]   =	Sampling_Enable_Reg[3].q[];
	
	WHEN OTHERS => DataBusOut[15..0]   =	gnd;
END CASE;




END; -- Конец модуля