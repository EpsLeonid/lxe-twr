TITLE "Ethernet IPv4 decoder";

INCLUDE "Edge_Sensing_Sync.inc";
INCLUDE "lpm_shiftreg.inc";
INCLUDE "lpm_counter.inc";

Constant PARCER_CYLCLE_WIDTH = 10; -- 20
Constant PARCER_CYLCLE_CNT_WIDTH = Ceil(log2(PARCER_CYLCLE_WIDTH))+1;
Constant WORD_WIDTH	= 16; 

CONSTANT PacketLenghts_at_signaling_layer  = 2048;-- maximum length value in bytes
CONSTANT RxByte_Cnt_Width = Ceil( LOG2(PacketLenghts_at_signaling_layer))-1;

Constant IPv4_type    		    = H"0008";

CONSTANT HeaderFrame_Type		= 6;  -- 2 байт тип запроса (ARP или IPv4 или ...)
CONSTANT IP_Header    			= 7;  -- 20 байт (10 слова) для IP заголовка
CONSTANT UDP_Header    			= 17; -- 8 байт (4 слова) для UDP заголовка
CONSTANT RxCommandPath 			= 21; -- номер слова дешифруемое командой
CONSTANT RxDataPath    			= 22; -- номер слова дешифруемое как адрес или данные в зависимости от команды
CONSTANT RxDataWordLenght  		= 500;--(PacketLenghts_at_signaling_layer div 2)-RxCommandPath-1;

-- протокольные команды
CONSTANT CMD_PING 	   			= 1; -- команда эхо
CONSTANT CMD_READ_AD 	  		= 2; -- команда чтения адрес,данные,адрес,данные...
CONSTANT CMD_WRITE_AD 	   		= 3; -- команда записи адрес,данные,адрес,данные...
CONSTANT CMD_READ_BLOCK_16 	   	= 4; -- команда чтения адрес, 16 слов данных с автоинкрементом адреса, адрес, 16 слов данных...  
CONSTANT CMD_WRITE_BLOCK_16    	= 5; -- команда запмси адрес, 16 слов данных с автоинкрементом адреса, адрес, 16 слов данных... 



SUBDESIGN Eth_IPv4_Decoder
(
  Clock                         : input; -- System Clock, really Bus_Clock

  Rx_Data[WORD_WIDTH-1..0]  	: input;
  Rx_Addr[9..0]  				: output;
  Rx_Parcer_RQ					: input;
  Rx_NUM_Data[9..0]  			: input;
   
  Tx_Addr[9..0]  				: output;
  Tx_Data[WORD_WIDTH-1..0]  	: output;
  Tx_Word_Strobe      			: output;
  
  Reset                         : input;
  
  Rx_Error                      : output;
  Tx_Start				        : output;
  Rx_Parcer_in_progress  		: output;
  Rx_TRUE_RQ		            : output;
  Rx_NOT_RQ                 	: output;
  
  IP_Addr0_[WORD_WIDTH-1..0]	: input;
  IP_Addr1_[WORD_WIDTH-1..0]	: input;
  Port[WORD_WIDTH-1..0]			: input;
  
 
  --Сигналы для обмена с Секлеткой внутренней шиной проекта  
  AccessRequest			    	: output;
  AccessGranted			    	: input; 
  DirectOut				    	: output;
  AddrBusOut[15..0]	    		: output;
  DataBus_In[15..0]			    : input;  -- отправляемые с Внутренней Шины в Модуль данные
  DataBusStrobe 			 	: input;  -- строб приема/передачи данных наружу (высокий уровень, защелкиваем по заднему фронту)
 
  test : output;
)
VARIABLE
  Rx_Parcer_RQ_ES               : Edge_Sensing_Sync;
  RxParcerActive                : SRFF;
  IPv4_Request        		    : node; -- если опознан ARP запрос то запускаем отправку данных из Tx буффера
  Tx_Start_Pulse_Flag           : SRFF;
  Tx_Strobe                     : node;
  
  ParcerCnt						: LPM_COUNTER WITH (LPM_WIDTH = RxByte_Cnt_Width);
  
  Prescaler                     : LPM_COUNTER WITH (LPM_WIDTH = PARCER_CYLCLE_CNT_WIDTH);
  Pascer_Sample_Enable 			: node;
  
  IPv4_type_True				: node;
  IPv4_type_Flag				: SRFF;
  --IPv4_Err                      : node;
  --IPv4_Err_Flag					: SRFF;
  
  ParcerEndCyle                 : node;
  
  BUS_Direct                    : node; -- мастер выставляет данные на внутреннюю шину(VCC) для записи в ВР или требут данные(GND) от ВР
  Target_Command_Reg  			: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
  CMD_CS                        : node; -- если опознан ARP запрос то защелкиваем команду, взводим флаг отправки данных из Tx буффера
  Target_Address_Reg			: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
  ADDR_CS						: node;
  DATA_CS						: node;
   
  Access_Request                : SRFF;
  Data_Sent_OK					: node;
  Requiest_Enable     			: node;
  Tx_Word_Strobe_               : node;
  
  Tx_Start_Pulse 				: node;
  Tx_Start_Pulse_EN				: node;     
   
   
 
  
BEGIN

   Prescaler.(clock, sclr) = (Clock, Pascer_Sample_Enable OR Rx_Parcer_RQ_ES.q);
   IF (Prescaler.q[] ==  PARCER_CYLCLE_WIDTH) THEN  Pascer_Sample_Enable = VCC;
											  ELSE  Pascer_Sample_Enable = GND;
   END IF;

-------------------------------------------- Rx section --------------------------------------------
   Rx_Parcer_RQ_ES.(d,clk)  = (Rx_Parcer_RQ, Clock);
   RxParcerActive.(S,clk,R) = (Rx_Parcer_RQ_ES.q, Clock, ParcerEndCyle OR Reset);
   
   ParcerCnt.(clock,sload,cnt_en) = (Clock, Rx_Parcer_RQ_ES.q OR ParcerEndCyle, RxParcerActive.q AND Pascer_Sample_Enable);
   ParcerCnt.data[] = HeaderFrame_Type;
   
   IF(RxParcerActive.q == VCC) THEN
        Tx_Addr[9..0] = ParcerCnt.q[]; 
        --Rx_Addr[9..0] = ParcerCnt.q[];
        IF ((ParcerCnt.q[] == HeaderFrame_Type)   AND (Rx_Data[] == IPv4_type)) THEN  IPv4_type_True = VCC; END IF;
        IF ((ParcerCnt.q[] == HeaderFrame_Type+1) AND (IPv4_type_Flag.q == GND)) THEN ParcerEndCyle = VCC; END IF;  -- если это не IPv4 протокол, то конец работы цикла разборки данных
        IF (ParcerCnt.q[] == Rx_NUM_Data[9..0]) THEN ParcerEndCyle = VCC; END IF;  -- конец работы цикла разборки данных
   
        
      -- заголовок ответа
        IF (((ParcerCnt.q[] >= 6) AND (ParcerCnt.q[] <= 12)) OR ((ParcerCnt.q[] >= 21) AND (ParcerCnt.q[] < RxDataPath)))  THEN  Tx_Data[] = Rx_Data[];  END IF;
       
        CASE ParcerCnt.q[] IS
			WHEN 15			=>  Rx_Addr[9..0] = 13; Tx_Data[] = Rx_Data[];
			WHEN 16			=>	Rx_Addr[9..0] = 14;	Tx_Data[] = Rx_Data[];
			WHEN 18			=>  Rx_Addr[9..0] = 17; Tx_Data[] = Rx_Data[];
			WHEN OTHERS	    =>  Rx_Addr[9..0] = ParcerCnt.q[];
        END CASE;
	
		IF (ParcerCnt.q[] == 13)  THEN  Tx_Data[] = IP_Addr0_[];  END IF;
		IF (ParcerCnt.q[] == 14)  THEN  Tx_Data[] = IP_Addr1_[];  END IF;
		IF (ParcerCnt.q[] == 17)  THEN  Tx_Data[] = Port[];    END IF; -- порт 27015 по умолчанию
        IF (ParcerCnt.q[] == 19)  THEN  Tx_Data[] = Rx_Data[];  END IF;
        IF (ParcerCnt.q[] == 20)  THEN  Tx_Data[] = GND;  END IF;
   
       
      -- защелкиваем и определяем тип пришедшей команды
        IF (ParcerCnt.q[]==RxCommandPath) THEN CMD_CS = VCC; Tx_Data[] = Rx_Data[] OR H"2000"; 
										  ELSE CMD_CS = GND;                                   
		END IF;
		IF (ParcerCnt.q[]==RxCommandPath+1) THEN Tx_Start_Pulse = VCC; -- если IP и UDP заголовки правильные то разрешаем
										    ELSE Tx_Start_Pulse = GND; -- по концу работы парсера толкнуть отправку данных из Tx буффера
		END IF;

      -- защелкиваем адрес и данные
        FOR i IN 0 TO (RxDataWordLenght-1) GENERATE   -- адрес, данные, адрес, данные, ... ParcerReg.q[15..1]-1-RxDataPath
				IF (ParcerCnt.q[] == i*2+RxDataPath)   THEN ADDR_CS = VCC; Tx_Data[]       = Rx_Data[]; END IF;
				IF (ParcerCnt.q[] == i*2+1+RxDataPath) THEN DATA_CS = VCC; Tx_Data[15..8]  = DataBus_In[7..0]; Tx_Data[7..0] = DataBus_In[15..8]; END IF;
		END GENERATE;
	
        IF (DATA_CS==VCC) THEN Tx_Word_Strobe_ = Data_Sent_OK;
  						  ELSE Tx_Word_Strobe_ = Pascer_Sample_Enable;
        END IF;
    
       
                               ELSE
   
        IPv4_type_True	 	 = GND;
        Rx_Addr[]        	 = GND;
        Tx_Addr[]			 = GND;
        Tx_Data[] 			 = GND; 
        ParcerEndCyle        = GND;
        CMD_CS               = GND;
        ADDR_CS              = GND;
        DATA_CS              = GND;
        
   END IF;
   

   -- Master Access Control: формируем запрос на внутреннюю шину проекта
   -- отправляем данные на шину проекта
   Access_Request.S  	=	Requiest_Enable; 
   Access_Request.clk 	=  	Clock;
   Access_Request.R  	=	Data_Sent_OK; 
   AccessRequest		=	Access_Request.q;
   DirectOut            =   BUS_Direct;
   
   Data_Sent_OK	        =	DataBusStrobe AND AccessGranted;
   Requiest_Enable    	=   Edge_Sensing_Sync(.d=DATA_CS,.clk=Clock);
   AddrBusOut[15..0]	=	Target_Address_Reg.q[];
   
   Target_Command_Reg.(clock, enable, load) = (Clock, CMD_CS  AND Pascer_Sample_Enable, VCC);
   Target_Command_Reg.data[15..8] = Rx_Data[7..0]; Target_Command_Reg.data[7..0] = Rx_Data[15..8];
   Target_Address_Reg.(clock, enable, load) = (Clock, ADDR_CS AND Pascer_Sample_Enable, VCC);
   Target_Address_Reg.data[15..8] = Rx_Data[7..0]; Target_Address_Reg.data[7..0] = Rx_Data[15..8];
   
   CASE (Target_Command_Reg.q[] AND H"00FF")IS  -- анализируем младший байт, определяем тип команды
			WHEN CMD_READ_AD		=>  BUS_Direct = GND;
			WHEN CMD_WRITE_AD 		=>	BUS_Direct = VCC;	
			WHEN OTHERS			    =>  BUS_Direct = GND;
   END CASE;
   IF((Target_Command_Reg.q[] AND H"FF00") == 2) THEN Tx_Start_Pulse_EN = GND; -- анализируем старший байт, определяем входящаяя или возвращенная посылка
                                                 ELSE Tx_Start_Pulse_EN = VCC;
   END IF;
   
   -- флаги
   IPv4_type_Flag.(S,clk,R)       = (IPv4_type_True, Clock, Rx_Parcer_RQ_ES.q OR Reset);
   Tx_Start_Pulse_Flag.(S,clk,R)  = (Tx_Start_Pulse_EN AND Tx_Start_Pulse, Clock, Rx_Parcer_RQ_ES.q OR Reset);
   
   -- выходы
   Rx_Error		          = GND;
   Rx_NOT_RQ              = (!IPv4_type_Flag.q) AND ParcerEndCyle;
   Tx_Start				  = Tx_Start_Pulse_Flag.q AND ParcerEndCyle;
   Rx_Parcer_in_progress  = RxParcerActive.q;
   Tx_Word_Strobe         = RxParcerActive.q AND Tx_Word_Strobe_;
   Rx_TRUE_RQ             = IPv4_type_Flag.q AND ParcerEndCyle;
   
   test = ParcerEndCyle;
END;