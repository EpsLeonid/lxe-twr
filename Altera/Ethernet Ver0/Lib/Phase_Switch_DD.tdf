TITLE "Phase_Switch_DD";

-- This file includes functions for automatic switching of refrence clock
-- sourses - internal quartz 25MHz or external Phase0 signal. 

INCLUDE "lpm_counter.inc" ;
INCLUDE "lpm_shiftreg.inc";
include "Edge_Sensing.inc";
Include "CMD3_DAQ_LINK.inc";

PARAMETERS
(
FmaxThresh = 26000 ,  -- Upper limit in kHz
FminThresh = 24000 ,  -- Lower limit in kHz
RefClock   = 25000   -- PLL'd  or Local Quartz Freq.
);
--Assert ( !(RefClock == 25000 OR RefClock == 50000 OR RefClock == 75000 OR RefClock == 100000 OR RefClock == 125000 OR RefClock == 150000))
--Report "Current Phase_Switch for CMD-3 DAQ design RefClock must be harmonic of 25000kHz!!!"; 


--	constant Quartz_speed	=	25000;
	CONSTANT Link_Clock_Oversampling	=	4;
--	Constant Parameter_Scaler	=	(RefClock div 25000 )
	CONSTANT Prescaler_Module	=	((Link_Clock_Oversampling * RefClock) DIV Link_Clock) div 1000;
	Constant Prescaler_Module_2	=	Prescaler_Module div 2 ;
	Constant Prescaler_Width	=	CEIL(log2(Prescaler_Module+1)); 
	Constant Comparing_Counters_width	=	16;--CEIL(log2((Link_Clock *1000)+1));

Assert ( !(FmaxThresh > 30000) AND !(FmaxThresh < (Link_Clock *1000)))
Report "In T2Q design FmaxThresh must be some greater then 25000kHz"; 
Assert ( !(FminThresh < 20000) AND !(FminThresh > (Link_Clock *1000)))
Report "In T2Q design FminThresh must be some smaller then 25000kHz"; 

SUBDESIGN Phase_Switch_DD
(
	 --------------- General Bus Signaling  
	Reference_Clock			    : input ; -- частота работы модул€ (25..125ћ√ц). Main clock, assumed F_link x 4 = 100MHz
 	Reset						: input=gnd ; -- Common FPGA signal Reset (Active HIGH)
	DataBusOut[WORD_WIDTH-1..0]	: output ; -- 

	----------------  Module Specific Signals
	Link_Phase0					: input;
	Phase25						: output; -- Output to Pin144  
	LinkClock_Enabled	    	: output; -- Signal to ensure what sourse is active
	Error						: output ;
)

VARIABLE 
	Link_Clock_Spectrum_Shifter		: lpm_counter WITH ( LPM_WIDTH = 2 );--	CONSTANT Link_Clock_Oversampling	=	4;
	Link_Clock_Edge					: Edge_Sensing ;
	Link_Clock_Pulse				: node ;
	
	Prescaler	            : LPM_COUNTER with (lpm_width = Prescaler_Width);
	Prescaler_Output        : node;	--Cyclic reset, 50% shaper
	--Prescaler_50pct_out, Prescaler_50set
	
	Timing_Window_Cnt		: lpm_counter WITH ( LPM_WIDTH = Comparing_Counters_width );
	Cycle_End				: node;
	Link_Clock_Cnt			: lpm_counter WITH ( LPM_WIDTH = Comparing_Counters_width );
	Actual_Phase0_Freq_Reg	: lpm_shiftreg with (LPM_WIDTH = Comparing_Counters_width );
	Comparator_Decision 	: node;
	Freq_OK, Phase_OK		: node;
	PhaseTrig				: DFF;
	PhaseEdge 				: Edge_Sensing; 
	PhaseSwich				: SRFF;
	MUX_Control             : node;
	Freq_Losted		        : Edge_Sensing; -- Error, if Link clock losted
	
    PhaseWindowTimer		: lpm_counter WITH ( LPM_WIDTH = 16 );
    PhaseWindowTimer_RST    : node;

BEGIN

-- Link_Clock presampling section begin
   Link_Clock_Spectrum_Shifter.clock		=	Link_Phase0 ;--Divider for	Niquist oversampling capability
   Link_Clock_Edge.(clk, d)	=	(Reference_Clock, Link_Clock_Spectrum_Shifter.q[1]); -- Resynchronized pulse, suitable for counting
   Link_Clock_Pulse			=	Link_Clock_Edge.q;
-- Link_Clock presampling section end

-- Divider RefClock to (Link_Clock div Link_Clock_Oversampling) !!! Prescaler_Module always is greater than 4 !!!
   Prescaler.(clock,sclr)	=	(Reference_Clock, Prescaler_Output or Reset);
   IF(Prescaler.q[] == (Prescaler_Module-1))   THEN Prescaler_Output = VCC; ELSE Prescaler_Output =	GND; END IF;
  -- IF(Prescaler.q[] == (Prescaler_Module_2-1)) THEN Prescaler_50set	 = VCC; ELSE Prescaler_50set  =	GND; END IF;
  -- Prescaler_50pct_out = SRFF(Prescaler_50set, Prescaler_Output, Reference_Clock, !Reset, );-- output freq=25/4=6.25MHz


   Timing_Window_Cnt.(Clock, sclr, clk_en) = (Reference_Clock, Cycle_End OR Reset, Prescaler_Output) ;


-- Base time interval  -- Base time interval counter 25000 == 4ms at freq=25/4=6.25MHz
   IF (Timing_Window_Cnt.q[] == (Link_Clock *1000 -1 )) 
       THEN Cycle_End = VCC; 
       ELSE	Cycle_End = GND;
   END IF;

-- Frequency diskriminator section begin 
   Link_Clock_Cnt.(clock, cnt_en)	=	(Reference_Clock, Link_Clock_Pulse);
   Link_Clock_Cnt.sclr = (Cycle_End and Prescaler_Output) OR Reset ;
   Actual_Phase0_Freq_Reg.data[]	=	Link_Clock_Cnt.q[];
   Actual_Phase0_Freq_Reg.(clock, enable, load)	=	(Reference_Clock, (Cycle_End and Prescaler_Output), VCC );
--  CMP
   IF ((Actual_Phase0_Freq_Reg.q[] > FmaxThresh) OR (Actual_Phase0_Freq_Reg.q[] < FminThresh)) 
       THEN Comparator_Decision=GND;
       ELSE	Comparator_Decision=VCC; 
   END IF;
   Freq_OK = DFF(Comparator_Decision, Reference_Clock, !Reset, ); -- Deglitching
-- Frequency diskriminator section end 


--Phase discriminator section begin
   PhaseTrig.(d, clk) =	(Link_Phase0, Reference_Clock) ;-- Sampling Link Clock at Reference_Clock 
   PhaseEdge.(d, clk) =	(PhaseTrig.q, Reference_Clock); -- Finding metastables
   PhaseSwich.S=(PhaseEdge.q OR PhaseWindowTimer_RST) AND Freq_OK;-- Phase detector is resetted if Freq.Detector fails
   PhaseSwich.(R, clk)= (!Freq_OK, Reference_Clock);

   Phase_OK	=	PhaseSwich.q;
   
   PhaseWindowTimer.(clock,cnt_en,sclr) = (Reference_Clock,Freq_OK, PhaseSwich.q);
   IF(PhaseWindowTimer.q[] >= 65500) THEN PhaseWindowTimer_RST = VCC;
                                     ELSE PhaseWindowTimer_RST = GND;
   END IF;
   
--Phase discriminator section end


-- Mux section begin 
   MUX_Control	=	Freq_OK AND Phase_OK ;
   Phase25 = ((Link_Phase0 and MUX_Control) OR (Reference_Clock and !MUX_Control));
-- Mux section end 

   LinkClock_Enabled = MUX_Control;
   Error             = Freq_Losted.q ;
   Freq_Losted.(d, clk, clr) = (!MUX_Control, Reference_Clock, Reset);

   IF (WORD_WIDTH == Comparing_Counters_width) GENERATE
      DataBusOut[]	=	Actual_Phase0_Freq_Reg.q[];
      ELSE GENERATE
		for i in 0 to Comparing_Counters_width-1 GENERATE
		DataBusOut[i]	=	Actual_Phase0_Freq_Reg.q[i]; END GENERATE;
		DataBusOut[WORD_WIDTH-1..Comparing_Counters_width-1] = GND;
   END GENERATE;



END;