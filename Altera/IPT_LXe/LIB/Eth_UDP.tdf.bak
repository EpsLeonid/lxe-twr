Title "Ethernet_UDP";
--V.1 made by L.Epshteyn

INCLUDE "lpm_shiftreg.inc" ;
INCLUDE "lpm_counter.inc" ;
INCLUDE "lpm_add_sub.inc";
INCLUDE "EdgeSensing.inc";
INCLUDE "CheckSum.inc";

INCLUDE "Eth_tx_RAM.inc";
INCLUDE "Eth_rx_RAM.inc";

SUBDESIGN IPT_LXe
(
Data_rx[15..0]				: input;
Data_rx_in[3..0]			: output;

Data_tx[15..0]				: input;
Data_tx_out[3..0]			: output;

Eth_Strobe					: input;
Clk25						: input;
PwdUP						: input;
Strobe						: input;

Error						: output;

)

VARIABLE

Eth_tx_RAM					: Eth_tx_RAM;
Eth_rx_RAM					: Eth_rx_RAM;
Eth_rx_cnt_in				: lpm_counter with (lpm_width = 12, lpm_direction="up"); -- счетчик адресса на входе памяти
Eth_tx_cnt_in				: lpm_counter with (lpm_width = 9, lpm_direction="up"); -- счетчик адресса на входе памяти
Eth_rx_cnt_q				: lpm_counter with (lpm_width = 12, lpm_direction="up"); -- счетчик адресса на выходе памяти
Eth_tx_cnt_q				: lpm_counter with (lpm_width = 12, lpm_direction="up"); -- счетчик адресса на выходе памяти
Reg_rx						: lpm_shiftreg with (LPM_WIDTH = 4, LPM_DIRECTION="unused"); --регистр на прием данных
Reg_tx						: lpm_shiftreg with (LPM_WIDTH = 4, LPM_DIRECTION="unused"); --регистр на передачу данных

Checksum					: CheckSum;
Checksum_reg				: lpm_shiftreg with (LPM_WIDTH = 16, LPM_DIRECTION="unused"); -- регистр контрольной суммы посылки
Cnt_lenght					: lpm_counter with (lpm_width = 12, lpm_direction="up"); -- счетчик количества слов в посылке
Reg_lenght					: lpm_shiftreg with (LPM_WIDTH = 16, LPM_DIRECTION="unused"); -- регистр длинны посылки

SourcePort					: lpm_shiftreg with (LPM_WIDTH = 16, LPM_DIRECTION="unused"); -- регистр номера порта отправителя
ReceiverPort				: lpm_shiftreg with (LPM_WIDTH = 16, LPM_DIRECTION="unused"); -- регистр номера порта получателя
Eth_reset					: EdgeSensing;

BEGIN

--******************* Lenght of the data *******************

Cnt_lenght.(clock, clk_en, cnt_en, sclr) = (Clk25, VCC, Eth_Strobe, Eth_reset);
Reg_lenght.(data[],clock,load,enable) = (Cnt_lenght.q[], Clk25, (!Eth_Strobe AND Delay_Eth_strobe.q), VCC);

--******************* Data transfer *******************
SourcePort.sset = RegInit;
ReceiverPort.sset = RegInit;

SourcePort.(data[], clock, enable, load) = (DataBus_In[], Clk25, RegInit OR SavePReg, VCC);
ReceiverPort.(data[], clock, enable, load) = (DataBus_In[], Clk25, RegInit OR SaveTReg, VCC);

-- ... адрес регистра Порта отправителя
IF(AddrBus_In[] == 770)  THEN SavePReg					= DataBusStrobe and  DirectIn AND Select;
                              DataBusOut[]= SourcePort.q[];
                         ELSE SavePReg					= GND; 
END IF;
-- ... адрес регистра Порта приемника
IF(AddrBus_In[] == 771)  THEN SaveTReg					= DataBusStrobe and  DirectIn AND Select;
                              DataBusOut[]= ReceiverPort.q[];
                         ELSE SaveTReg					= GND; 
END IF;

If Eth_Strobe = VCC
	Then 
		Eth_tx_RAM.(address_a[0], data_a, wren_a) = (0, SourcePort.q[], Eth_Strobe);
		Eth_tx_RAM.(address_a[1], data_a, wren_a) = (1, ReceiverPort.q[], Eth_Strobe);
		Eth_tx_RAM.(address_a[2], data_a, wren_a) = (2, Reg_lenght.q, Eth_Strobe);
		Eth_tx_RAM.(address_a[3], data_a, wren_a) = (3, Checksum.CheckSum, Eth_Strobe);
	Else
		Eth_tx_RAM.(address_a[0], data_a, wren_a) = (0, b"0", Eth_Strobe);
		Eth_tx_RAM.(address_a[1], data_a, wren_a) = (1, b"0", Eth_Strobe);
		Eth_tx_RAM.(address_a[2], data_a, wren_a) = (2, b"0", Eth_Strobe);
		Eth_tx_RAM.(address_a[3], data_a, wren_a) = (3, b"0", Eth_Strobe);
END IF;

Checksum_reg.() = 
Eth_tx_cnt_in.sload = Eth_Strobe;
Eth_tx_cnt_in.data[] = b"100";

Eth_tx_RAM.clock = clock
Eth_tx_RAM.(address_a[10..2], wren_a) = (Eth_tx_cnt_in.q[], Eth_Strobe);
Eth_tx_RAM.data_a[] = Data_tx[15..0];
Eth_tx_cnt_in.(clock, clk_en, cnt_en, sclr) = (clock, VCC, Eth_Strobe);

Checksum.data[] = Eth_tx_RAM.data_b[];
Eth_tx_RAM.address_b[] = Eth_tx_cnt_q.q[]
Eth_tx_cnt_q.(clock, clk_en, cnt_en, sclr) = (clock, VCC, );

--******************* Data receiving *******************

Eth_rx_RAM.(address_a[], clock_a, wren_a) = 
Eth_rx_cnt_in.() = 
Eth_rx_RAM.(data_b[],address_b[], clock_b) = 
Eth_rx_cnt_q.() = 

Eth_reset.(d,clk) = ((!Eth_Strobe AND Delay_Eth_strobe.q), Clk25);

END;