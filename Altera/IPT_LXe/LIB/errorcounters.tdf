TITLE "ErrorCounters";
INCLUDE "lpm_counter.inc";
INCLUDE "Edge_Sensing.inc" ;

--Constant Width=11;
CONSTANT Word_Width = 16;
PARAMETERS ( Width = 11  );
CONSTANT AddrWidth = FLOOR (LOG2(Width))+1;

Subdesign ErrorCounters
(
-- Standard Interface Signaling
-- »нтерфейс на шину проекта пользовател€
	Clock						: input;  -- частота работы модул€ (25..125ћ√ц). Main clock, assumed F_link x 4 = 100MHz
	DataBusStrobe				: input ;  -- строб приема/передачи данных наружу (высокий уровень, защелкиваем по заднему фронту)

    AddrBusIn[AddrWidth-1..0]	: input ; -- шина адреса дл€ доступа в пространство пам€ти
-- 	Reset                     : input=gnd ; -- Common FPGA signal Reset (Active HIGH)
    DataBusOut[WORD_WIDTH-1..0]	: output; -- 
	Select						: input ;
	
----------------  Specific Signals
ErrorInputs[Width-1..0]	: input;
)

VARIABLE
    Edge_of_Error_Input[Width-1..0]			: Edge_Sensing;
    Reg_of_Error[Width-1..0]				: SRFF	;
    Counter_of_Error[Width-1..0]		 	: lpm_counter with (lpm_width=16);
    Clear_Reg, Clear_Counters, C_R,C_C		: node;
BEGIN


FOR i IN 0 TO Width-1 GENERATE
  Edge_of_Error_Input[i].(clk, d)	         = (Clock, ErrorInputs[i] );
  Reg_of_Error[i].(clk, S, R )		         = (Clock, Edge_of_Error_Input[i].q, Clear_Reg);
  Counter_of_Error[i].(clock, cnt_en, sclr ) = (Clock, Edge_of_Error_Input[i].q, Clear_Counters);
END GENERATE;

%CASE AddrBusIn[3..0] IS
when 0	=>	DataBusOut[WIDTH-1..0]	=	Reg_of_Error[Width-1..0].q; DataBusOut[WORD_WIDTH-1..WIDTH]	=	GND;
when 1	=>	DataBusOut[]	=	Counter_of_Error[0].q[];
when 2	=>	DataBusOut[]	=	Counter_of_Error[1].q[];
when 3	=>	DataBusOut[]	=	Counter_of_Error[2].q[];
when 4	=>	DataBusOut[]	=	Counter_of_Error[3].q[];
when 5	=>	DataBusOut[]	=	Counter_of_Error[4].q[];
when 6	=>	DataBusOut[]	=	Counter_of_Error[5].q[];
when 7	=>	DataBusOut[]	=	Counter_of_Error[6].q[];
when 8	=>	DataBusOut[]	=	Counter_of_Error[7].q[];
when 9	=>	DataBusOut[]	=	Counter_of_Error[8].q[];
when 10	=>	DataBusOut[]	=	Counter_of_Error[9].q[];
when 11	=>	DataBusOut[]	=	Counter_of_Error[10].q[];
when others	=>	DataBusOut[]=	GND;
END CASE;
CASE AddrBusIn[3..0] IS
when 0 =>	C_R=VCC; C_C=GND;
when 12 =>	C_R=GND; C_C=VCC;
when others	=>	C_R=GND; C_C=GND;
END CASE;
Clear_Reg		=	DFF(.clk=Clock, .d=( Select AND DataBusStrobe AND C_R));
Clear_Counters	=	DFF(.clk=Clock, .d=( Select AND DataBusStrobe AND C_C));%

IF (AddrBusIn[AddrWidth-1..0] == 0) THEN DataBusOut[WIDTH-1..0]	= Reg_of_Error[Width-1..0].q; DataBusOut[WORD_WIDTH-1..WIDTH] = GND; END IF;

FOR i IN 1 TO Width GENERATE
    IF (AddrBusIn[AddrWidth-1..0] == i) THEN DataBusOut[] = Counter_of_Error[i-1].q[]; END IF;  
END GENERATE;   

IF (AddrBusIn[AddrWidth-1..0] == 0)     THEN C_R=VCC; C_C=GND; END IF;
IF (AddrBusIn[AddrWidth-1..0] == Width) THEN C_R=GND; C_C=VCC; END IF;
Clear_Reg		=	DFF(.clk=Clock, .d=( Select AND DataBusStrobe AND C_R));
Clear_Counters	=	DFF(.clk=Clock, .d=( Select AND DataBusStrobe AND C_C));


END;