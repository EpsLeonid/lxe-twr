

INCLUDE "eth_tx";

SUBDESIGN test_tr_eth 
 
(
reset                 : input ;  
TXclk                 : input ;
St_tx_test            : input ;
t_TXDout[3..0]        : output;
t_TXena               : output;
t_DataField           : output;
t_Lenght[15..0]       : output;
t_couTransmit[15..0]  : output;
t_FrameCheck          : output;
t_EndTrans            : output;


        
t_cop[3..0]           : input;       -- код команды
t_workMemSize[7..0]   : input;
t_rg_delay_a[15..0]   : input;
t_rg_delay_b[15..0]   : input; 
t_rg_iniADR_rd[19..0] : input;
t_read_length[15..0]  : input;
t_enP_Start           : input;
Fp[3..0]              : input;

)

VARIABLE

t_Saddr[47..0]       : node;
t_Daddr[47..0]       : node;
t_Lenght_tr[15..0]   : node;
t_Lenght[15..0]      : node;
t_SendData[3..0]     : node;
en_rg_load           : lcell;
t_RgDAP_RAM[31..0]   : node;
t_coud[11..0]        : dffe; 
en_t_coud            : lcell;
------------------------------------------
Tr_t                 : eth_tx;
t_TXDout[3..0]       : node;
t_TXena              : node;
t_DestinationAddr    : node;
t_SourceAddr         : node;
t_PacketLenth        : node;
t_DataField          : node;
t_EndTrans           : node;
t_couTransmit[15..0] : node;
t_FrameCheck         : node;

BEGIN 

t_Daddr[47..0]    =  H"1a1a1a1a1a10";
t_Saddr[47..0]    =  H"bcbcbcbcbcbc";

t_Lenght_tr[15..0] = t_Lenght[15..0] + 18;     -- длину надо модифицировать в соответствии с t_cop[3..0]             
                                               -- RAMcor (RgDat[3..0] == 6) длина - 256 байт!!! 
                                               -- (t_cop[3..1] == 3) 
 if (t_cop[3..0] == 7) then                                               
 t_Lenght[15..0]    = H"0108"; 
else 
 t_Lenght[15..0]    = H"0040";--H"0048";
end if;                                                             

 --=====================================================================================================  
 -- Передатчик для отладки интерфейсного модуля 

Tr_t.clear           = reset;
Tr_t.Lenght[15..0]   = t_Lenght[15..0];                   
Tr_t.StTransmit      = St_tx_test;
Tr_t.tx_clk          = TXclk;
Tr_t.SendData[3..0]  = t_SendData[3..0];
   
t_TXDout[3..0]       = Tr_t.txd[3..0];
t_TXena              = Tr_t.tx_ena;
t_DestinationAddr    = Tr_t.DestinationAddr;
t_SourceAddr         = Tr_t.SourceAddr;
t_PacketLenth        = Tr_t.PacketLenth;
t_DataField          = Tr_t.DataField;
t_EndTrans           = Tr_t.EndTrans;
t_couTransmit[15..0] = Tr_t.couTransmit[];
t_FrameCheck         = Tr_t.FrameCheck; 

IF t_DestinationAddr THEN
   CASE t_couTransmit[3..0] IS
	 WHEN 0  => t_SendData[] = t_Daddr[43..40];               
	 WHEN 1  => t_SendData[] = t_Daddr[47..44];
	 WHEN 2  => t_SendData[] = t_Daddr[35..32];
	 WHEN 3  => t_SendData[] = t_Daddr[39..36];
	 WHEN 4  => t_SendData[] = t_Daddr[27..24];
	 WHEN 5  => t_SendData[] = t_Daddr[31..28];
	 WHEN 6  => t_SendData[] = t_Daddr[19..16];
	 WHEN 7  => t_SendData[] = t_Daddr[23..20];
	 WHEN 8  => t_SendData[] = t_Daddr[11..8];
	 WHEN 9  => t_SendData[] = t_Daddr[15..12];
	 WHEN 10 => t_SendData[] = Fp[3..0];
	 WHEN 11 => t_SendData[] = t_Daddr[7..4];
  END CASE;
END IF;

IF t_SourceAddr THEN
   CASE t_couTransmit[3..0] IS
	 WHEN 0  => t_SendData[] = t_Saddr[43..40];  
	 WHEN 1  => t_SendData[] = t_Saddr[47..44];
	 WHEN 2  => t_SendData[] = t_Saddr[35..32];
	 WHEN 3  => t_SendData[] = t_Saddr[39..36];
	 WHEN 4  => t_SendData[] = t_Saddr[27..24];
	 WHEN 5  => t_SendData[] = t_Saddr[31..28];
	 WHEN 6  => t_SendData[] = t_Saddr[19..16];
	 WHEN 7  => t_SendData[] = t_Saddr[23..20];
	 WHEN 8  => t_SendData[] = t_Saddr[11..8];
	 WHEN 9  => t_SendData[] = t_Saddr[15..12];
	 WHEN 10 => t_SendData[] = t_Saddr[3..0];
	 WHEN 11 => t_SendData[] = t_Saddr[7..4];
  END CASE;
END IF;

IF t_PacketLenth THEN
   CASE t_couTransmit[1..0] IS
	 WHEN 0  => t_SendData[] = t_Lenght_tr[11..8];
	 WHEN 1  => t_SendData[] = t_Lenght_tr[15..12];
	 WHEN 2  => t_SendData[] = t_Lenght_tr[3..0];
	 WHEN 3  => t_SendData[] = t_Lenght_tr[7..4];
   END CASE;
END IF;

IF t_DataField & (t_couTransmit[15..4] == 0) THEN      -- ЗАГРУЗКА РЕГИСТРОВ УПРАВЛЕНИЯ RgDat[63..0]
   CASE t_couTransmit[3..0] IS
	 WHEN 0  => t_SendData[] = t_cop[3..0];                                                   
	 WHEN 1  => t_SendData[] = (gnd,gnd,gnd,t_enP_Start);                      
	 WHEN 2  => t_SendData[] = t_workMemSize[3..0]    & !(t_cop[3..1] == 2);                        
	 WHEN 3  => t_SendData[] = t_workMemSize[7..4]    & !(t_cop[3..1] == 2); 
	                             
	 WHEN 4  => t_SendData[] = t_rg_delay_a[3..0]     & !(t_cop[3..1] == 2)
	                         # t_read_length[3..0]    &  (t_cop[3..1] == 2);                          
	 WHEN 5  => t_SendData[] = t_rg_delay_a[7..4]     & !(t_cop[3..1] == 2)
	                         # t_read_length[7..4]    &  (t_cop[3..1] == 2);                                
	 WHEN 6  => t_SendData[] = t_rg_delay_a[11..8]    & !(t_cop[3..1] == 2)
	                         # t_read_length[11..8]   &  (t_cop[3..1] == 2);                                       
	 WHEN 7  => t_SendData[] = t_rg_delay_a[15..12]   & !(t_cop[3..1] == 2)
	                         # t_read_length[15..12]  &  (t_cop[3..1] == 2);    
     WHEN 8  => t_SendData[] = t_rg_delay_b[3..0]     & !(t_cop[3..1] == 2)
	                         # t_rg_iniADR_rd[3..0]   &  (t_cop[3..1] == 2);                                     
	 WHEN 9  => t_SendData[] = t_rg_delay_b[7..4]     & !(t_cop[3..1] == 2)
	                         # t_rg_iniADR_rd[7..4]   &  (t_cop[3..1] == 2);                     
	 WHEN 10 => t_SendData[] = t_rg_delay_b[11..8]    & !(t_cop[3..1] == 2)
	                         # t_rg_iniADR_rd[11..8]  &  (t_cop[3..1] == 2);                                     
	 WHEN 11 => t_SendData[] = t_rg_delay_b[15..12]   & !(t_cop[3..1] == 2)
	                         # t_rg_iniADR_rd[15..12] &  (t_cop[3..1] == 2);                                     
	 WHEN 12 => t_SendData[] = t_rg_iniADR_rd[19..16] &  (t_cop[3..1] == 2);                             
	 WHEN 13 => t_SendData[] = (gnd,gnd,gnd,gnd);                            
	 WHEN 14 => t_SendData[] = (gnd,gnd,gnd,gnd);      
	 WHEN 15 => t_SendData[] = (gnd,gnd,gnd,gnd);                                   
   END CASE;
END IF;

-- КОМАНДЫ КАНАЛА СВЯЗИ 

-- Nop        = (RgDat[3..0] == 0) -- нет операции, ожидание команды (ИСХОДНОЕ СОСТОЯНИЕ)
-- Reset_ADC  = (RgDat[3..0] == 1) -- СБРОС элементов модуля в исходное состояние, ИНИЦИАЛИЗАЦИЯ PLL, ЦАП и АЦП     
-- LOAD_Reg   = (RgDat[3..0] == 2) -- Запись УПРАВЛЯЮЩИХ КОНСТАНТ в регистры
-- en_Start   = (RgDat[3..0] == 3) -- Разрешение запуска 
-- R_data_req = (RgDat[3..0] == 4) -- Запрос на чтение массива данных
-- RAMini       (RgDat[3..0] == 7) -- загрузка таблицы коэффициентов в RAMini с последующим чтением

-------- LOAD_ADJ   = (RgDat[3..0] == 5) -- Процедура КАЛИБРОВКИ масштабов и напряжений сдвига нуля,
--------                                    прямая загрузка ЦАП данными приемника (ADJreg[31..0]), обратная передача этих данных
-------- RAMcor     	(RgDat[3..0] == 6) -- загрузка таблицы коэффициентов в RAMcor с последующим чтением 

en_rg_load = (t_cop[] == 0)
           # (t_cop[] == 1)
           # (t_cop[] == 2) 
           # (t_cop[] == 3)
           # (t_cop[] == 4); 

IF	en_rg_load & t_DataField  & !(t_couTransmit[15..4] == 0) THEN -- данные для ЦАП - Rdac[63..0]
  CASE (t_couTransmit[3..0]) IS
     WHEN 0   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[59..56];              
	 WHEN 1   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[63..60];
	 WHEN 2   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[51..48];
	 WHEN 3   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[55..52];
	 WHEN 4   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[43..40];
	 WHEN 5   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[47..44];
	 WHEN 6   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[35..32];
	 WHEN 7   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[39..36];
	 WHEN 8   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[27..24];
	 WHEN 9   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[31..28];
	 WHEN 10  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[19..16];
	 WHEN 11  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[23..20];
	 WHEN 12  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[11..8];
	 WHEN 13  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[15..12];
	 WHEN 14  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[3..0];
	 WHEN 15  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_Rdac[7..4];
  END CASE;                                                                     
END IF;	 

-- LOAD_ADJ

IF	(t_cop[3..0] == 5) & t_DataField  & !(t_couTransmit[15..4] == 0) THEN
  CASE (t_couTransmit[3..0]) IS
     WHEN 0   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[27..24];              
	 WHEN 1   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[31..28];
	 WHEN 2   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[19..16];
	 WHEN 3   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[23..20];
	 WHEN 4   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[11..8];
	 WHEN 5   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[15..12];
	 WHEN 6   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[3..0];
	 WHEN 7   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[7..4];
	 WHEN 8   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[27..24]; 
	 WHEN 9   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[31..28];
	 WHEN 10  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[19..16];
	 WHEN 11  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[23..20];
	 WHEN 12  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[11..8];
	 WHEN 13  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[15..12];
	 WHEN 14  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[3..0];
	 WHEN 15  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[7..4];
  END CASE;                                                                     
END IF;

-- Load RAMini (64 24-х разрядных слова, 32*4 байта, 32*8 нибблов)

t_RgDAP_RAM[31..0] = (gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,t_coud[]);

t_coud[11..0].d    = t_coud[11..0].q + 1;
t_coud[11..0].ena  = en_t_coud;
t_coud[11..0].clk  = TXclk;
t_coud[11..0].clrn = reset & !t_PacketLenth;

IF	(t_cop[3..1] == 3) & t_DataField  & !(t_couTransmit[15..4] == 0) THEN
                 
  CASE (t_couTransmit[3..0]) IS
     WHEN 0   => t_SendData[3..0] = t_RgDAP_RAM[3..0];              
	 WHEN 1   => t_SendData[3..0] = t_RgDAP_RAM[7..4];
	 WHEN 2   => t_SendData[3..0] = t_RgDAP_RAM[11..8];
	 WHEN 3   => t_SendData[3..0] = t_RgDAP_RAM[15..12];
	 WHEN 4   => t_SendData[3..0] = t_RgDAP_RAM[19..16];
	 WHEN 5   => t_SendData[3..0] = t_RgDAP_RAM[23..20];
	 WHEN 6   => t_SendData[3..0] = t_RgDAP_RAM[27..24];
	 WHEN 7   => t_SendData[3..0] = t_RgDAP_RAM[31..28];
	             en_t_coud = vcc;
	 WHEN 8   => t_SendData[3..0] = t_RgDAP_RAM[3..0];
	 WHEN 9   => t_SendData[3..0] = t_RgDAP_RAM[7..4];
	 WHEN 10  => t_SendData[3..0] = t_RgDAP_RAM[11..8];
	 WHEN 11  => t_SendData[3..0] = t_RgDAP_RAM[15..12];
	 WHEN 12  => t_SendData[3..0] = t_RgDAP_RAM[19..16];
	 WHEN 13  => t_SendData[3..0] = t_RgDAP_RAM[23..20];
	 WHEN 14  => t_SendData[3..0] = t_RgDAP_RAM[27..24];
	 WHEN 15  => t_SendData[3..0] = t_RgDAP_RAM[31..28];
	             en_t_coud = vcc;
  END CASE;                                                                     
END IF;

END; 