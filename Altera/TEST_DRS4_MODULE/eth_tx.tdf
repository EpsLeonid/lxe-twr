INCLUDE "crc32nibble";
INCLUDE "lpm_counter";

SUBDESIGN eth_tx
(

    CLEAR                 : INPUT ; -- сброс
    Lenght[15..0]         : input ; -- длина пакета данных (старший разряд всегда = 0)!
    StTransmit            : input ; -- старт передачи пакета
	SendData[3..0]        : INPUT;  -- nible данных для передачи
	TX_CLK                : INPUT;  -- ethernet clock (25 MHz)
	TXD[3..0]             : OUTPUT; -- ethernet data out
	TX_ENA                : OUTPUT; -- ethernet data valid
	DestinationAddr       : OUTPUT; -- флаг "идет передача поля адреса абонента приемника данных"
    SourceAddr            : OUTPUT; -- флаг "идет передача поля адреса абонента передатчика данных"
    PacketLenth           : output;
    DataField             : OUTPUT;	-- флаг "идет передача блока данных" 
    EndTrans              : OUTPUT; -- передача фрейма завершена
	couTransmit[15..0]    : output; -- адресный счетчик блока данных
	FrameCheck            : output;
	enTransmit			  : output;
--	StStream			  : output;
	StFrame				  : output;
	sm_t[2..0]			  : output;
	CRC_ok				  : output;
)

VARIABLE

    couTransmit_cnt         : LPM_COUNTER WITH (LPM_WIDTH=16, LPM_DIRECTION="up");
	crct                    : crc32nibble;
	TXD_FF[3..0], TX_ENA_FF :DFF ;
    StStream                :DFFE;
    StFrame                 :DFFE; 
    DestinationAddr         :DFFE; 
    SourceAddr              :DFFE;
    PacketLenth             :DFFE;
    DataField               :DFFE;
    FrameCheck              :DFFE; 
    enTransmit              :DFFE;	
	sm_t[2..0]              :dffe; 
	EndTrans                :dffe;     
	
BEGIN

DEFAULTS
	crct.clk_en          = VCC;
END DEFAULTS;

	CRC_ok				 = crct.CRC_ok;

	TXD[]                = TXD_FF[];
	TXD_FF[].clk         = TX_CLK;
	TX_ENA               = TX_ENA_FF;
	TX_ENA_FF.clk        = TX_CLK;
	
	TX_ENA_FF.d          = enTransmit & !EndTrans;	
    
	-- РАЗРЕШЕНИЕ ПЕРЕДАЧИ ПАКЕТА
	
	enTransmit.d         = !EndTrans;                   --StTransmit  & !enTransmit;
	enTransmit.ena       = StTransmit  & !enTransmit
	                     # EndTrans    &  enTransmit;
	enTransmit.clk       = TX_CLK;
	enTransmit.clrn      = clear;
	
	EndTrans.d			 = vcc;
	EndTrans.clk         = TX_CLK;
	EndTrans.clrn		 = enTransmit;
	
	sm_t[].clk           = TX_CLK;
	sm_t[].clrn          = clear;
	
		
	(StStream, StFrame, DestinationAddr, SourceAddr, PacketLenth, DataField, FrameCheck%, InterFrame%).CLK = TX_CLK;
    (StFrame, DestinationAddr, SourceAddr, PacketLenth, DataField, FrameCheck%, InterFrame%).CLRN = enTransmit;  
	
	couTransmit[]         = couTransmit_cnt.q[];
	couTransmit_cnt.clock = TX_CLK;
	couTransmit_cnt.aclr  = !enTransmit;
	
	crct.clk             = TX_CLK;
	
	CASE sm_t[] IS
		 WHEN 0 =>
		     IF StTransmit  & !enTransmit THEN			--& !StStream
			    StStream.d  = VCC;
			    sm_t[].d    = 1;
			 END IF;
			    crct.clk_en      = gnd;
			    
		 WHEN 1 =>
		        crct.sclr        = vcc; 
		     IF (couTransmit_cnt.q[3..0]== 14) THEN
			    StFrame.d   = VCC;
			    StStream.d  = GND;
			    sm_t[].d    = 2;
			 else
			    StFrame.d   = gnd;
			    StStream.d  = vcc;
			    sm_t[].d    = 1;
		     END IF;
		        TXD_FF[].d       = 5;
		        crct.clk_en      = gnd;
		        
		 WHEN 2 =>
		     IF (couTransmit_cnt.q[3..0] == 15) THEN
		        DestinationAddr.d  = VCC;
			    StFrame.d          = GND;
			    sm_t[].d           = 3;
			    couTransmit_cnt.data[] = 0;
			    couTransmit_cnt.sload = vcc;
			 else
			    DestinationAddr.d  = gnd;
			    StFrame.d          = vcc;
			    sm_t[].d           = 2; 
		     END IF;
		        TXD_FF[].d       = 13;
		        crct.clk_en      = vcc;                -- !!
		        crct.sclr        = vcc;                -- !!
		 WHEN 3 =>                                     -- нужно подставить адрес получателя пакета (принятыйранее в поле Source)
		     IF (couTransmit_cnt.q[3..0]== 11) THEN
		        SourceAddr.d       = VCC;
		        DestinationAddr.d  = GND;
			    sm_t[].d           = 4;
			    couTransmit_cnt.data[] = 0;
			    couTransmit_cnt.sload = vcc;
			else 
			    SourceAddr.d       = gnd;
		        DestinationAddr.d  = vcc;
			    sm_t[].d           = 3;
		     END IF;
		        TXD_FF[].d       = sendData[];
		        crct.d[]         = SendData[];
		        crct.clk_en      = vcc;
		        
		 WHEN 4 =>                                     -- нужно подставить собственный адрес (источника информации)
			 IF (couTransmit_cnt.q[3..0] == 11) THEN
		        PacketLenth.d = VCC;
		        SourceAddr.d  = GND;
		        sm_t[].d      = 5;
		        couTransmit_cnt.data[] = 0;
			    couTransmit_cnt.sload = vcc;
		     else 
		        PacketLenth.d = gnd;
		        SourceAddr.d  = vcc;
		        sm_t[].d      = 4;
		     END IF;
		        TXD_FF[].d       = sendData[];
		        crct.d[]         = SendData[];
		        crct.clk_en      = vcc;
		        
		 WHEN 5 =>
		     IF (couTransmit_cnt.q[1..0] == 3) THEN
		        DataField.d   = VCC; 
		        PacketLenth.d = GND;
		        sm_t[].d      = 6;
		        couTransmit_cnt.data[] = 0;
			    couTransmit_cnt.sload = vcc;
		     else
		        DataField.d   = gnd; 
		        PacketLenth.d = vcc;
		        sm_t[].d      = 5; 
		     END IF;
		        TXD_FF[].d       = sendData[];
		        crct.d[]         = SendData[];
		        crct.clk_en      = vcc;
		 WHEN 6 =>
		     IF (couTransmit_cnt.q[] == ((Lenght[14..0],gnd) - 1)) THEN
		        FrameCheck.d  = VCC;
		        DataField.d   = GND;
		        sm_t[].d      = 7;
		        couTransmit_cnt.data[] = 0;
			    couTransmit_cnt.sload = vcc;
		     else
		        FrameCheck.d  = gnd;
		        DataField.d   = vcc;
		        sm_t[].d      = 6;
		     END IF;
		        TXD_FF[].d       = sendData[];
		        crct.d[]         = SendData[];
		        crct.clk_en      = vcc;
		        
		 WHEN 7 => 
		     IF (couTransmit_cnt.q[2..0] == 7) THEN
		        FrameCheck.d  = GND;
		        sm_t[].d      = 0;
		     else
		        sm_t[].d      = 7;
		        FrameCheck.d  = vcc;
		     END IF;
		        
			CASE couTransmit_cnt.q[2..0] IS
				WHEN 0 => TXD_FF[].d = crct.q[  3..0];
				WHEN 1 => TXD_FF[].d = crct.q[  7..4];
				WHEN 2 => TXD_FF[].d = crct.q[ 11..8];
				WHEN 3 => TXD_FF[].d = crct.q[15..12];
				WHEN 4 => TXD_FF[].d = crct.q[19..16];
				WHEN 5 => TXD_FF[].d = crct.q[23..20];
				WHEN 6 => TXD_FF[].d = crct.q[27..24];
				WHEN 7 => TXD_FF[].d = crct.q[31..28];
				          EndTrans.ena  = vcc;
			END CASE;
			    crct.clk_en      = gnd;
			    
			
	END CASE;

END;