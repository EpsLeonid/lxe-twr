INCLUDE "crc32nibble";
INCLUDE "lpm_counter";

SUBDESIGN eth_rx
(

    ready                 : input ; -- разрешение приема данных
	RX_CLK	              : INPUT;
	RX_DV	              : INPUT;
	COL                   : INPUT;
	CRS                   : INPUT;
	RXD[3..0]             : INPUT; 
	stReceiveDestination  : output; -- флаг "идет прием адреса Destination"
	stReceiveSource       : output; -- флаг "идет прием адреса Source"
	RgLength[15..0]       : output; -- длина принятого блока данных (старший разряд всегда = 0)!
    stReceiveData         : output; -- флаг "идет прием блока данных"
	addr_receive[15..0]   : OUTPUT; -- адресный счетчик (длина блока данных содержится в первом адресе!)
	Data[3..0]            : OUTPUT; -- nibble данных 
	en_check              : output; -- прием фрейма завершен
	Receive_OK            : output; -- флаг "1" - данные приняты корректно
	StCheck               : OUTPUT;
	
)
VARIABLE


	RX_DV_FF, RXD_FF[3..0], COL_FF, CRS_FF : DFF;

	addrCntr                : LPM_COUNTER WITH (LPM_WIDTH=16);

	smr :	MACHINE WITH STATES 
	       (stIdle,stCheckPreamble,stWaitSFD,stReceiveDestination,stReceiveSource,stReceiveLength,stReceiveData,StCheck);

	crcr                    : crc32nibble;
	RgLength[15..0]         : dffe;
	en_check                : dffe; 
	Receive_OK              : NODE;
	
BEGIN

	(RX_DV_FF, RXD_FF[], COL_FF, CRS_FF ).clk = RX_CLK;
	
	RX_DV_FF.d = RX_DV;
	RXD_FF[].d = RXD[]; 
	COL_FF.d   = COL;
	CRS_FF.d   = CRS;
	
	crcr.d[]    = RXD_FF[];
	crcr.clk    = RX_CLK;
	crcr.clk_en = VCC;
	
	Receive_OK  = crcr.crc_ok; 
	
	RgLength[3..0].d   = RXD_FF[];
	RgLength[7..4].d   = RXD_FF[];
	RgLength[11..8].d  = RXD_FF[];
	RgLength[15..12].d = RXD_FF[];
	RgLength[].clk     = RX_CLK;
	
	addrCntr.clock         = RX_CLK;
	addr_receive[]         = addrCntr.q[];

	Data[]                 = RXD_FF[];
	
   	en_check.clk = RX_CLK;   

	smr.clk      = RX_CLK;

	CASE smr IS
	
		WHEN stIdle =>
			IF RX_DV_FF AND ready THEN 
			            smr = stCheckPreamble;
			            addrCntr.sclr = VCC; 
			END IF;
			
		WHEN stCheckPreamble =>
			IF RX_DV_FF AND RXD_FF[]==H"5" THEN 
				        smr           = stWaitSFD;
			ELSIF  RX_DV_FF == GND THEN
				        smr           = stIdle;
			END IF;

		WHEN stWaitSFD =>
			            crcr.sclr     = VCC;
			            addrCntr.sclr = VCC;
					
			IF  RX_DV_FF & (RXD_FF[]== H"D") THEN
				        smr           = stReceiveDestination;
			ELSIF	RX_DV_FF & (RXD_FF[3..0] == H"5") THEN
				        smr           = stWaitSFD;
			ELSE 
			            smr           = stIdle;	
			END IF;
			
		WHEN stReceiveDestination =>                     -- нужна проверка на совпадение адреса с адресом приемника
			            
			IF RX_DV_FF & (addr_receive[3..0] == 11) then
			            smr            = stReceiveSource;
			            addrCntr.sclr  = VCC;
			ELSIF RX_DV_FF == GND THEN
				        smr            = stIdle;
			END IF;
					
		WHEN stReceiveSource =>                          -- нужно зафиксировать адрес источника запроса для последующего ответа
		
		    IF RX_DV_FF & (addr_receive[3..0] == 11) then
			            smr            = stReceiveLength;
			            addrCntr.sclr  = VCC;
			ELSIF RX_DV_FF == GND THEN
				        smr            = stIdle;
		    END IF;
		
		WHEN stReceiveLength =>
		
		    IF RX_DV_FF & (addr_receive[1..0] == 3) then
			            smr            = stReceiveData;
			            addrCntr.sclr  = VCC;
			ELSIF RX_DV_FF == GND THEN
				        smr            = stIdle;
		    END IF;
		    
		    CASE addr_receive[1..0]IS
				WHEN 0 => RgLength[11..8].ena  = vcc;
				WHEN 1 => RgLength[15..12].ena = vcc;
				WHEN 2 => RgLength[3..0].ena   = vcc;
				WHEN 3 => RgLength[7..4].ena   = vcc;
			END CASE;
		
		WHEN stReceiveData =>
			
		     IF RX_DV_FF & (addr_receive[] == ((RgLength[14..0],gnd) - 37)) THEN -- -1!
			            smr            = StCheck;
			            addrCntr.sclr  = VCC;
			 ELSIF RX_DV_FF == GND THEN
				        smr            = stIdle;
			 END IF;
				
	    WHEN StCheck  =>
	         
			 IF	RX_DV_FF & (addr_receive[2..0] == 7) THEN
			            smr             = stIdle;
			            en_check.d      = vcc; 
			                       
			 ELSIF RX_DV_FF == GND THEN
				        smr             = stIdle;		
			 END IF;
			          	     		
	END CASE;
	
	END;