TITLE "trans_eth"; --ads5281"

INCLUDE "eth_tx";

SUBDESIGN trans_eth   -- ads5281 

(
p_n[1..0]			  : input ;
reset                 : input ;
TXclk                 : input ;
start_reply           : input ;
Saddr[47..0]          : input ;
Daddr[47..0]          : input ;  
Rkop[3..0]            : input ;
Rdev_number[3..0]     : input ;
Rstat_cor             : input ;
Rpachka               : input ;
Rcalibr               : input ; 
Rnumber_n[15..0]      : input ;
Rnumber_p[15..0]      : input ;
Rzap_delay[15..0]     : input ;
rg_DACA[15..0]        : input ;
rg_DACB[15..0]        : input ;
rg_DACC[15..0]        : input ;
rg_DACD[15..0]        : input ;
rg_DACE[15..0]        : input ;
rg_DACF[15..0]        : input ;
rg_DACG[15..0]        : input ;
rg_DACH[15..0]        : input ;

foto_DACA[15..0]        : input ;
foto_DACB[15..0]        : input ;
foto_DACC[15..0]        : input ;
foto_DACD[15..0]        : input ;
foto_DACE[15..0]        : input ;
foto_DACF[15..0]        : input ;   
foto_DACG[15..0]        : input ;
foto_DACH[15..0]        : input ;

rg_DAC_BIAS[15..0]    : input ;
rg_DAC_ROFS[15..0]    : input ;

send_md[7..0]         : input ;

TXD[3..0]             : output;               
TXEN                  : output;          
EndTrans              : output;     
DestinationAddr       : output;    
SourceAddr            : output;  
PacketLenth           : output;
DataField             : output;
couTransmit[15..0]    : output;
en_read_dm            : output;
en_read_slow		  : output;
en_read_adr			  : output;
--adr_ini_a[9..0]		  : input;
)

VARIABLE

    Transmitter               : eth_tx;
    Lenght_tr[15..0]          : dffe;
    SendData[3..0]            : node;
    TXD[3..0]                 : node;         
    TXEN                      : node;              
    DestinationAddr           : node;
    SourceAddr                : node;
    PacketLenth               : node;
    DataField                 : node;
    EndTrans                  : node;
    couTransmit[15..0]        : node;
    FrameCheck                : node;
    Lenght[15..0]             : node; 
    LenghtReply[15..0]        : node;
    Lenght_slow[15..0]        : node;
    Lenght_adr[15..0]      	  : node;
    Lenght_t[15..0]           : dffe;
    en_radr_mem               : dffe;
    en_read_dm                : dffe;
    en_read_slow			  : dffe;
    en_read_adr				  : dffe;
        
Begin

Transmitter.clear           = reset;
Transmitter.Lenght[15..0]   = Lenght_t[15..0];            -- длина пакета данных          
Transmitter.StTransmit      = start_reply;                  -- # St_tx_data_ram;
Transmitter.tx_clk          = TXclk;
Transmitter.SendData[3..0]  = SendData[3..0];
   
TXD[3..0]              = Transmitter.txd[3..0];
TXEN                   = Transmitter.tx_ena;
DestinationAddr        = Transmitter.DestinationAddr;
SourceAddr             = Transmitter.SourceAddr;
PacketLenth            = Transmitter.PacketLenth;
DataField              = Transmitter.DataField;
EndTrans               = Transmitter.EndTrans;
couTransmit[15..0]     = Transmitter.couTransmit[];
FrameCheck             = Transmitter.FrameCheck; 

-- формирование nibble  (SendData[3..0])

IF DestinationAddr THEN
   CASE couTransmit[3..0] IS
	 WHEN 0  => SendData[] = Daddr[43..40];               
	 WHEN 1  => SendData[] = Daddr[47..44];
	 WHEN 2  => SendData[] = Daddr[35..32];
	 WHEN 3  => SendData[] = Daddr[39..36];
	 WHEN 4  => SendData[] = Daddr[27..24];
	 WHEN 5  => SendData[] = Daddr[31..28];
	 WHEN 6  => SendData[] = Daddr[19..16];
	 WHEN 7  => SendData[] = Daddr[23..20];
	 WHEN 8  => SendData[] = Daddr[11..8];
	 WHEN 9  => SendData[] = Daddr[15..12];
	 WHEN 10 => SendData[] = Daddr[3..0];
	 WHEN 11 => SendData[] = Daddr[7..4];
  END CASE;
END IF;

IF SourceAddr THEN
   CASE couTransmit[3..0] IS
	 WHEN 0  => SendData[] = Saddr[43..40];  
	 WHEN 1  => SendData[] = Saddr[47..44];
	 WHEN 2  => SendData[] = Saddr[35..32];
	 WHEN 3  => SendData[] = Saddr[39..36];
	 WHEN 4  => SendData[] = Saddr[27..24];
	 WHEN 5  => SendData[] = Saddr[31..28];
	 WHEN 6  => SendData[] = Saddr[19..16];
	 WHEN 7  => SendData[] = Saddr[23..20];
	 WHEN 8  => SendData[] = Saddr[11..8];
	 WHEN 9  => SendData[] = Saddr[15..12];
	 WHEN 10 => SendData[] = Saddr[3..0];
	 WHEN 11 => SendData[] = Saddr[7..4];
  END CASE;
END IF;

Lenght_tr[15..0].d      = (Lenght[15..0] + 18)          &  ((Rkop[3..0] == 11) #  (Rkop[3..0] == 10) # (Rkop[3..0] == 12))
                        # (LenghtReply[15..0] + 18)     & !((Rkop[3..0] == 11) # (Rkop[3..0] == 10) # (Rkop[3..0] == 12));  

						%  (Lenght[15..0] + 18)          &  (Rkop[3..0] == 11)    -- !en_reply - чтение массива данных!
						# (Lenght_slow[15..0] + 18)     &  (Rkop[3..0] == 10)    -- !en_reply - чтение массива данных!
						# (Lenght_adr[15..0] + 18)      &  (Rkop[3..0] == 12)    -- !en_reply - чтение массива данных!
                        # (LenghtReply[15..0] + 18)     & !((Rkop[3..0] == 11) # (Rkop[3..0] == 10) # (Rkop[3..0] == 12));   --  en_reply% 
                   
Lenght_t[15..0].d       = Lenght[15..0]          &  ((Rkop[3..0] == 11) #  (Rkop[3..0] == 10) # (Rkop[3..0] == 12))
                        # LenghtReply[15..0]     & !((Rkop[3..0] == 11) # (Rkop[3..0] == 10) # (Rkop[3..0] == 12)); 

						%  Lenght[15..0]                 &  (Rkop[3..0] == 11)    -- !en_reply
						# Lenght_slow[15..0]            &  (Rkop[3..0] == 10)    -- !en_reply
						# Lenght_adr[15..0]             &  (Rkop[3..0] == 12)    -- !en_reply
                        # LenghtReply[15..0]            & !((Rkop[3..0] == 11) # (Rkop[3..0] == 10)# (Rkop[3..0] == 12) );   --  en_reply%

(Lenght_tr[],Lenght_t[]).ena = DestinationAddr;
(Lenght_tr[],Lenght_t[]).clk = TXclk;                         
                                          

Lenght[15..0]           = H"0440";            --1024 + 64 + 18
LenghtReply[15..0]      = H"0040";            --       64 + 18 
Lenght_slow[15..0] 		= H"0080"; 			  -- 64 + 64 + 18 	
Lenght_adr[15..0]		= H"0044"; 			  -- 64 + 4 + 18
--============================================

IF PacketLenth THEN
   CASE couTransmit[1..0] IS
	 WHEN 0  => SendData[] = Lenght_tr[11..8];  
	 WHEN 1  => SendData[] = Lenght_tr[15..12]; 
	 WHEN 2  => SendData[] = Lenght_tr[3..0];   
	 WHEN 3  => SendData[] = Lenght_tr[7..4];   
   END CASE;
END IF;
    
en_radr_mem.clk  = TXclk;
en_radr_mem.clrn = TXEN;

IF DataField & (couTransmit[15..6] == 0) THEN    -- ПЕРЕДАЧА УКАЗАТЕЛЯ НОМЕРА ПАКЕТА и количества считываемых пакетов
   CASE couTransmit[5..0] IS
	 WHEN 0  => SendData[] = Rkop[3..0];                            
	 WHEN 1  => SendData[] = Rdev_number[3..0]; 
	 WHEN 2  => SendData[] = (gnd,gnd,p_n[1..0]); 
	 WHEN 3  => SendData[] = (gnd,Rcalibr,Rpachka,Rstat_cor); 
	 WHEN 4  => SendData[] = Rnumber_n[3..0];
	 WHEN 5  => SendData[] = Rnumber_n[7..4];                   
	 WHEN 6  => SendData[] = Rnumber_n[11..8];                  
	 WHEN 7  => SendData[] = Rnumber_n[15..12];                
     WHEN 8  => SendData[] = Rnumber_p[3..0];         
	 WHEN 9  => SendData[] = Rnumber_p[7..4];        
	 WHEN 10 => SendData[] = Rnumber_p[11..8];        
	 WHEN 11 => SendData[] = Rnumber_p[15..12]; 
	 WHEN 12 => SendData[] = Rzap_delay[3..0];  
	 WHEN 13 => SendData[] = Rzap_delay[7..4];  
	 WHEN 14 => SendData[] = Rzap_delay[11..8];
	 WHEN 15 => SendData[] = Rzap_delay[15..12]; 
	 WHEN 16 => SendData[] = 	rg_DACA[3..0] & (Rdev_number[] == 0)
							# foto_DACA[3..0] & (Rdev_number[] == 1);                             
	 WHEN 17 => SendData[] = 	rg_DACA[7..4] & (Rdev_number[] == 0)
							# foto_DACA[7..4] & (Rdev_number[] == 1); 
	 WHEN 18 => SendData[] = 	rg_DACA[11..8] & (Rdev_number[] == 0)
							# foto_DACA[11..8] & (Rdev_number[] == 1);
	 WHEN 19 => SendData[] = 	rg_DACA[15..12] & (Rdev_number[] == 0)
							# foto_DACA[15..12] & (Rdev_number[] == 1); 
	 WHEN 20 => SendData[] = 	rg_DACB[3..0] & (Rdev_number[] == 0)
							# foto_DACB[3..0] & (Rdev_number[] == 1); 
	 WHEN 21 => SendData[] = 	rg_DACB[7..4] & (Rdev_number[] == 0)
							# foto_DACB[7..4] & (Rdev_number[] == 1);                    
	 WHEN 22 => SendData[] = 	rg_DACB[11..8] & (Rdev_number[] == 0)
							# foto_DACB[11..8] & (Rdev_number[] == 1);                   
	 WHEN 23 => SendData[] = 	rg_DACB[15..12] & (Rdev_number[] == 0)
							# foto_DACB[15..12] & (Rdev_number[] == 1);                 
     WHEN 24 => SendData[] = 	rg_DACC[3..0] & (Rdev_number[] == 0)
							# foto_DACC[3..0] & (Rdev_number[] == 1);         
	 WHEN 25 => SendData[] = 	rg_DACC[7..4] & (Rdev_number[] == 0)
							# foto_DACC[7..4] & (Rdev_number[] == 1);        
	 WHEN 26 => SendData[] = 	rg_DACC[11..8] & (Rdev_number[] == 0)
							# foto_DACC[11..8] & (Rdev_number[] == 1);        
	 WHEN 27 => SendData[] = 	rg_DACC[15..12] & (Rdev_number[] == 0)
							# foto_DACC[15..12] & (Rdev_number[] == 1); 
	 WHEN 28 => SendData[] = 	rg_DACD[11..8] & (Rdev_number[] == 0)
							# foto_DACD[11..8] & (Rdev_number[] == 1);  
	 WHEN 29 => SendData[] = 	rg_DACD[7..4] & (Rdev_number[] == 0)
							# foto_DACD[7..4] & (Rdev_number[] == 1);  
	 WHEN 30 => SendData[] = 	rg_DACD[11..8] & (Rdev_number[] == 0)
							# foto_DACD[11..8] & (Rdev_number[] == 1);
	 WHEN 31 => SendData[] = 	rg_DACD[15..12] & (Rdev_number[] == 0)
							# foto_DACD[15..12] & (Rdev_number[] == 1); 
	 WHEN 32 => SendData[] = 	rg_DACE[3..0] & (Rdev_number[] == 0)
							# foto_DACE[3..0] & (Rdev_number[] == 1);                             
	 WHEN 33 => SendData[] = 	rg_DACE[7..4] & (Rdev_number[] == 0)
							# foto_DACE[7..4] & (Rdev_number[] == 1); 
	 WHEN 34 => SendData[] = 	rg_DACE[11..8] & (Rdev_number[] == 0)
							# foto_DACE[11..8] & (Rdev_number[] == 1);
	 WHEN 35 => SendData[] = 	rg_DACE[15..12] & (Rdev_number[] == 0)
							# foto_DACE[15..12] & (Rdev_number[] == 1);
	 WHEN 36 => SendData[] = 	rg_DACF[3..0] & (Rdev_number[] == 0)
							# foto_DACF[3..0] & (Rdev_number[] == 1); 
	 WHEN 37 => SendData[] = 	rg_DACF[7..4] & (Rdev_number[] == 0)
							# foto_DACF[7..4] & (Rdev_number[] == 1);                    
	 WHEN 38 => SendData[] = 	rg_DACF[11..8] & (Rdev_number[] == 0)
							# foto_DACF[11..8] & (Rdev_number[] == 1);                   
	 WHEN 39 => SendData[] = 	rg_DACF[15..12] & (Rdev_number[] == 0)
							# foto_DACF[15..12] & (Rdev_number[] == 1);                 
     WHEN 40 => SendData[] = 	rg_DACG[3..0] & (Rdev_number[] == 0)
							# foto_DACG[3..0] & (Rdev_number[] == 1);          
	 WHEN 41 => SendData[] = 	rg_DACG[7..4] & (Rdev_number[] == 0)
							# foto_DACG[7..4] & (Rdev_number[] == 1);          
	 WHEN 42 => SendData[] = 	rg_DACG[11..8] & (Rdev_number[] == 0)
							# foto_DACG[11..8] & (Rdev_number[] == 1);         
	 WHEN 43 => SendData[] = 	rg_DACG[15..12] & (Rdev_number[] == 0)
							# foto_DACG[15..12] & (Rdev_number[] == 1);  
	 WHEN 44 => SendData[] = 	rg_DACH[3..0] & (Rdev_number[] == 0)
							# foto_DACH[3..0] & (Rdev_number[] == 1);  
	 WHEN 45 => SendData[] = 	rg_DACH[7..4] & (Rdev_number[] == 0)
							# foto_DACH[7..4] & (Rdev_number[] == 1);  
	 WHEN 46 => SendData[] = 	rg_DACH[11..8] & (Rdev_number[] == 0)
							# foto_DACH[11..8] & (Rdev_number[] == 1);
	 WHEN 47 => SendData[] = 	rg_DACH[15..12] & (Rdev_number[] == 0)
							# foto_DACH[15..12] & (Rdev_number[] == 1); 
	 WHEN 48 => SendData[] = rg_DAC_ROFS[3..0];   -- (n_DAC[2..0], load_DAC);--(gnd,gnd,gnd,gnd);   --                          
	 WHEN 49 => SendData[] = rg_DAC_ROFS[7..4]; --(gnd, gnd, stop_slow_ADC, load_slow_ADC);--(gnd,gnd,gnd,gnd); --
	 WHEN 50 => SendData[] = rg_DAC_ROFS[11..8];
	 WHEN 51 => SendData[] = rg_DAC_ROFS[15..12]; 
	 WHEN 52 => SendData[] = rg_DAC_BIAS[3..0]; 
	 WHEN 53 => SendData[] = rg_DAC_BIAS[7..4];                    
	 WHEN 54 => SendData[] = rg_DAC_BIAS[11..8];                   
	 WHEN 55 => SendData[] = rg_DAC_BIAS[15..12];                 
     WHEN 56 => SendData[] = (gnd,gnd,gnd,gnd); -- adr_ini_a[3..0]; 	--(gnd,gnd,gnd,gnd); --       
	 WHEN 57 => SendData[] = (gnd,gnd,gnd,gnd); -- adr_ini_a[7..4]; 	--(gnd,gnd,gnd,gnd); --       
	 WHEN 58 => SendData[] = (gnd,gnd,gnd,gnd); -- adr_ini_a[11..8]; 	--(gnd,gnd,gnd,gnd); --       
	 WHEN 59 => SendData[] = (gnd,gnd,gnd,gnd); -- adr_ini_a[15..12];   --(gnd,gnd,gnd,gnd); -- 
	 WHEN 60 => SendData[] = (gnd,gnd,gnd,gnd);  
	 WHEN 61 => SendData[] = (gnd,gnd,gnd,gnd);  
	 WHEN 62 => SendData[] = (gnd,gnd,gnd,gnd);
	 WHEN 63 => SendData[] = (gnd,gnd,gnd,gnd);
  END CASE;
END IF;  

-- Разрешение чтения данных с быстрых АЦП

en_read_dm.d    = !(couTransmit[15..0] == 2174);
en_read_dm.ena  = DataField & (couTransmit[15..0] == 126)   -- & (Rkop[3..0] == 11)
                # DataField & (couTransmit[15..0] == 2174); -- & (Rkop[3..0] == 11);
en_read_dm.clk  = TXclk;
en_read_dm.clrn = (Rkop[3..0] == 11) # (Rkop[3..0] == 10) #  (Rkop[3..0] == 12);

-- Разрешение чтения данных с медленных АЦП

en_read_slow.d    = !(couTransmit[15..0] == 190);
en_read_slow.ena  =   DataField & (couTransmit[15..0] == 126)   -- & (Rkop[3..0] == 11)
					# DataField & (couTransmit[15..0] == 190); -- & (Rkop[3..0] == 11);
en_read_slow.clk  = TXclk;
en_read_slow.clrn = (Rkop[3..0] == 10);               
               
-- Разрешение чтения adr_ini_a

en_read_adr.d    = !(couTransmit[15..0] == 130);
en_read_adr.ena  =   DataField & (couTransmit[15..0] == 126)   -- & (Rkop[3..0] == 11)
					# DataField & (couTransmit[15..0] == 130); -- & (Rkop[3..0] == 11);
en_read_adr.clk  = TXclk;
en_read_adr.clrn = (Rkop[3..0] == 12); 


IF DataField  & !(couTransmit[15..6] == 0) THEN    
    CASE (couTransmit[2..0]) IS
 	 WHEN 0 => SendData[] = send_md[3..0] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
 	 WHEN 1 => SendData[] = send_md[7..4] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
	 WHEN 2 => SendData[] = send_md[3..0] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
	 WHEN 3 => SendData[] = send_md[7..4] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
	 WHEN 4 => SendData[] = send_md[3..0] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
	 WHEN 5 => SendData[] = send_md[7..4] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
	 WHEN 6 => SendData[] = send_md[3..0] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
	 WHEN 7 => SendData[] = send_md[7..4] & ((Rkop[3..0] == 11) # (Rkop[3..0] == 10));
  END CASE;
END IF; 

IF DataField  & !(couTransmit[15..6] == 0) THEN    
    CASE (couTransmit[1..0]) IS
 	 WHEN 0 => SendData[] = send_md[3..0] & (Rkop[3..0] == 12);
 	 WHEN 1 => SendData[] = send_md[7..4] & (Rkop[3..0] == 12);
	 WHEN 2 => SendData[] = send_md[3..0] & (Rkop[3..0] == 12);
	 WHEN 3 => SendData[] = send_md[7..4] & (Rkop[3..0] == 12);
  END CASE;
END IF; 

END;