TITLE "TEST_DRS4";                         -- DAC - AD9754

INCLUDE "test_tr_eth";
INCLUDE "receiver_eth";
INCLUDE "trans_eth";
INCLUDE "iobuf";
INCLUDE "lmk04906";
INCLUDE "pll_test";

SUBDESIGN TEST_DRS4  

(

test_signal[27..0]						  : output;

Data_drs[7..0]                            : bidir ;  --IO[20..13]
Addr_drs[9..0]                            : output;  --IO[12..3]
n_b[2..0]                                 : output;	 --IO[2..1]
dir                                       : output;  --IO[0] 22 линии!
clk_bus                                   : output;  --i_clk0

I_CLK[3..0]                               : input;

RXD[3..0]                                 : input;
RXDV                                      : input;
RXCLK                                     : input;
--READY                                     : input; --

RXER                                      : input;
TXER                                      : output;
TXclk                                     : input;
TXEN                                      : output;
TXD[3..0]                                 : output;
COL                                       : input;
CRS                                       : input;

CLK25                                     : input;
ETH_R                                     : output;

SYNC_S                                    : output;
S/H                                       : input;
STAT                                      : input;
CS_S                                      : output;
SCLK_S                                    : output;
DATA_S                                    : output;

--TEST[27..0]                               : input;

-------------------------------------------------------
--reset                                     : input;
St_tx_test                                : input;
kop[3..0]                                 : input;
dev_number[3..0]                          : input;
data_DACA[15..0]                          : input;
data_DACB[15..0]                          : input;
data_DACC[15..0]                          : input;
data_DACD[15..0]                          : input;
data_DACE[15..0]                          : input;
data_DACF[15..0]                          : input;
data_DACG[15..0]                          : input;
data_DACH[15..0]                          : input;
calibr                                    : input;
pachka                                    : input;
stat_cor                                  : input;
number_n[15..0]                           : input;
number_p[15..0]                           : input;
zap_delay[15..0]                          : input;
--Fp[3..0]                                  : input;
COR_DATA[15..0]                           : input;   
COR_DATB[15..0]                           : input;   
COR_DATC[15..0]                           : input;  
COR_DATD[15..0]                           : input;   
COR_DATE[15..0]                           : input;  
COR_DATF[15..0]                           : input;   
COR_DATG[15..0]                           : input;   
COR_DATH[15..0]                           : input;      

t_TXDout[3..0]                            : output;
t_TXena                                   : output;
t_DataField                               : output;
t_Lenght[15..0]                           : output;
t_couTransmit[15..0]                      : output;
t_FrameCheck                              : output;
t_EndTrans                                : output;

Rkop[3..0],Rdev_number[3..0]              : output;
Rstat_cor,Rpachka,Rcalibr                 : output;
Rnumber_n[15..0],Rnumber_p[15..0]         : output; 
Rzap_delay[15..0]                         : output;
Daddr[47..0]                              : output;
CheckDes                                  : output;
Rcheck                                    : output;
Rok                                       : output;
Rdestination                              : output;
Raddr[15..0]                              : output; 
Rdata[3..0]                               : output;
rg_DACA[15..0]                            : output; 
rg_DACB[15..0]                            : output;
rg_DACC[15..0]                            : output; 
rg_DACD[15..0]                            : output;  
rg_DACE[15..0]                            : output; 
rg_DACF[15..0]                            : output;         
rg_DACG[15..0]                            : output;   
rg_DACH[15..0]                            : output; 

start_reply                               : output;

EndTrans                                  : output;
DestinationAddr                           : output;
SourceAddr                                : output;
PacketLenth                               : output;
DataField                                 : output;
couTransmit[15..0]                        : output;

load_c_d                                  : output;
cou_load[4..0]                            : output;
end_load_c_d                              : output;

data_ou_eth[31..0]                        : output;
data_in_eth[27..0]                        : output;
waddr_eth[7..0]                           : output;
wren                                      : output; 

load_data                                 : output ;                                  
cou_rd_data[9..0]                         : output ;
en_cou_rd[1..0]                           : output ; 

load_md                                   : output ;
load_cd                                   : output ; 

read_md                                   : output ;
read_m[1..0]                              : output ;
start_rmd                                 : output ;
p_n[1..0]                                 : output ;
en_read_dm                                : output ;


--load_sd                                   : output ;
--cou_l_sd[4..0]                            : output ;

)

VARIABLE

reset				 : node;

test_tr              :test_tr_eth; 

t_TXDout[3..0]       : node;
t_TXena              : node;
t_DataField          : node;
t_Lenght[15..0]      : node;
t_couTransmit[15..0] : node;
t_FrameCheck         : node;
t_EndTrans           : node;

rec_eth              : receiver_eth;

Saddr[47..0]         : node;
READY                : node;

Daddr[47..0]         : node;
CheckDes             : node;
Rcheck               : node;
Rok                  : node;
Rdestination         : node;
Raddr[15..0]         : node; 
Rdata[3..0]          : node;
rg_DACA[15..0]       : node; 
rg_DACB[15..0]       : node;
rg_DACC[15..0]       : node; 
rg_DACD[15..0]       : node;  
rg_DACE[15..0]       : node; 
rg_DACF[15..0]       : node;         
rg_DACG[15..0]       : node;   
rg_DACH[15..0]       : node;

rg_DAC_ROFS[15..0]   : node;
rg_DAC_BIAS[15..0]   : node;

en_reply             : dffe;
cou_reply[10..0]     : dffe;
end_cou_reply        : node;
start_reply          : dffe; 

Fp[3..0]             : node;    

--RXD[3..0]            : node;
--RXDV                 : node;

tr_eth               : trans_eth;
EndTrans             : node;
DestinationAddr      : node;
SourceAddr           : node;
PacketLenth          : node;
DataField            : node;
couTransmit[15..0]   : node;

load_c_d             : dffe;
load_cd              : dffe;
cou_load[4..0]       : dffe;
end_load_c_d         : dffe;
Addr_drs[9..0]       : node;
n_b[2..0]            : node;
dir                  : node;

data_ou_eth[31..0]   : node;
data_in_eth[27..0]   : node;
waddr_eth[7..0]      : node;
wren                 : node;

load_data            : dffe;
load_md              : dffe; 
cou_rd_data[9..0]    : dffe;
en_cou_rd[1..0]      : dffe;
end_load_data        : node; 
rg_cou_rd_data[9..0] : dffe;
iob                  : iobuf;
 
Data_b[7..0]         : node ;
data_bus_in[7..0]    : node ;

read_md              : dffe ;
read_m[1..0]         : dffe ;
start_rmd            : dffe ;
p_n[1..0]            : dffe ;
wait                 : dffe ;
cou_wait[7..0]       : dffe ;
end_wait             : node ;
en_read_dm           : node ;
cou_rdm[12..0]       : dffe ;

sync_load			 : lmk04906;

load_s               : dffe ;
--load_sd              : dffe ;
--cou_l_sd[4..0]       : dffe ;    
end_l_sd             : node ;

cou_rds[6..0]		 : dffe ; 
cou_rd_adr[2..0]	 : dffe ; 

foto_DACA[15..0]	 : node ; 
foto_DACB[15..0] 	 : node ;
foto_DACC[15..0] 	 : node ;
foto_DACD[15..0] 	 : node ;
foto_DACE[15..0] 	 : node ;
foto_DACF[15..0]	 : node ;    
foto_DACG[15..0] 	 : node ;
foto_DACH[15..0] 	 : node ;

en_read_slow		 : node ;
en_read_adr			 : node ;

adr_ini_a[9..0]		 : node ;
enTransmit			 : node ;
StStream, StFrame	 : node ;
sm_t[2..0]			 : node ;
CRC_ok				 : node ;
n_burst[1..0]		 : node ; 

load_cd_eth			 : dffe ;
load_cd_need		 : dffe ;

load_eth_sh, load_eth, load_eth_pr, load_pr : dffe;

test_data[7..0]		 : dffe;

pll_t				 : pll_test;

locked				 : node;
locked_sh[1..0]		 : dffe;
clk_50				 : node;
l_test				 : dffe;  

BEGIN
					   --27--------26--25----24-23-22-21-20-19-18-17-16-15--------14-13-12-11-10-9-8-7----6-5-4--3-----2---1------0---
test_signal[27..0]	= ( read_md, p_n[1..0], Addr_drs[9..0]                       ,    Data_drs[7..0]   , Rkop[3..0], n_b[1..0], en_read_dm);	

clk_bus = TXclk;--CLK25;---

reset 		= vcc;
ETH_R		= vcc;
TXER 		= gnd;		

--RXD[3..0] = t_TXDout[3..0];
--RXDV      = t_TXena;

-- kop[3..0],dev_number[3..0],data[] - структура пакета:

-- kop[3..0] = 0, dev_number[3..0] = X  - NOP
-- kop[3..0] = 1, dev_number[3..0] = X  - Pr_reset                  - команда
-- kop[3..0] = 2, dev_number[3..0] = X  - P_stop                    - команда
-- kop[3..0] = 3, dev_number[3..0] = X  - ADC_fast                  - команда
-- kop[3..0] = 4, dev_number[3..0] = X  - Start_s                   - команда
-- kop[3..0] = 5, dev_number[3..0] = X  - ADC_slow                  - команда  
-- kop[3..0] = 6, dev_number[3..0] = X  - ADC_slow_stop             - команда
-- kop[3..0] = 7, dev_number[3..0] = X  - En_Work                   - команда
-- kop[3..0] = 8, dev_number[3..0] = X  - calibr, pachka, stat_cor
-- kop[3..0] = 8, dev_number[3..0] = X  - number_n[]                ???
-- kop[3..0] = 8, dev_number[3..0] = X  - number_p[]                ???
-- kop[3..0] = 8, dev_number[3..0] = X  - zap_delay[]

-- kop[3..0] = 8, dev_number[3..0] = X  - DACA_load        data_DACA[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACB_load        data_DACB[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACC_load        data_DACC[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACD_load        data_DACD[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACE_load        data_DACE[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACF_load        data_DACF[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACG_load        data_DACG[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACH_load        data_DACH[15..0]

-- kop[3..0] = 8, dev_number[3..0] = X  - DACG_load        data_DAC_ROFS[15..0]
-- kop[3..0] = 8, dev_number[3..0] = X  - DACH_load        data_DAC_BIAS[15..0]

-- kop[3..0] = 9, dev_number[3..0] = 0  - COR_DATA_load    COR_DATA[15..0]
-- kop[3..0] = 9, dev_number[3..0] = 1  - COR_DATB_load    COR_DATB[15..0]
-- kop[3..0] = 9, dev_number[3..0] = 2  - COR_DATC_load    COR_DATC[15..0]
-- kop[3..0] = 9, dev_number[3..0] = 3  - COR_DATD_load    COR_DATD[15..0]
-- kop[3..0] = 9, dev_number[3..0] = 4  - COR_DATE_load    COR_DATE[15..0]
-- kop[3..0] = 9, dev_number[3..0] = 5  - COR_DATF_load    COR_DATF[15..0]
-- kop[3..0] = 9, dev_number[3..0] = 6  - COR_DATG_load    COR_DATG[15..0]
-- kop[3..0] = 9, dev_number[3..0] = 7  - COR_DATH_load    COR_DATH[15..0]

-- kop[3..0] = 10,dev_number[3..0] = 0  - outdata_adc_slow[23..0]

-- kop[3..0] = 11,dev_number[3..0] = 0  - datA_ou[31..0] + указатель номера пакета: 0, 1, 2, 3
-- kop[3..0] = 11,dev_number[3..0] = 1  - datB_ou[31..0] 
-- kop[3..0] = 11,dev_number[3..0] = 2  - datC_ou[31..0]
-- kop[3..0] = 11,dev_number[3..0] = 3  - datD_ou[31..0]
-- kop[3..0] = 11,dev_number[3..0] = 4  - datE_ou[31..0]
-- kop[3..0] = 11,dev_number[3..0] = 5  - datF_ou[31..0]
-- kop[3..0] = 11,dev_number[3..0] = 6  - datG_ou[31..0]
-- kop[3..0] = 11,dev_number[3..0] = 7  - datH_ou[31..0]

-- kop[3..0] = 12,dev_number[3..0] = X  - adr_ini_a[9..0],
-- kop[3..0] = 13, dev_number[3..0] = X - en_dac загрузка ЦАП

-- kop[] = 13..15, dev_number[] = 0..15 - РЕЗЕРВ!

Fp[3..0]	 = h"1";

Saddr[47..0] = (H"1a1a1a1a1a1",Fp[3..0]);--H"1a1a1a1a1a11";--
READY        = vcc;

-- ПЕРЕДАТЧИК ТЕСТОВЫХ ПОСЫЛОК

test_tr.reset                   = reset;
test_tr.TXclk                   = TXclk; 
test_tr.St_tx_test              = St_tx_test;
test_tr.Fp[3..0]                = Fp[3..0];
test_tr.kop[3..0]               = kop[3..0];     
test_tr.dev_number[3..0]        = dev_number[3..0];
test_tr.data_DACA[15..0]        = data_DACA[15..0];
test_tr.data_DACB[15..0]        = data_DACB[15..0];
test_tr.data_DACC[15..0]        = data_DACC[15..0];
test_tr.data_DACD[15..0]        = data_DACD[15..0];
test_tr.data_DACE[15..0]        = data_DACE[15..0];
test_tr.data_DACF[15..0]        = data_DACF[15..0];
test_tr.data_DACG[15..0]        = data_DACG[15..0];
test_tr.data_DACH[15..0]        = data_DACH[15..0];
test_tr.calibr                  = calibr; 
test_tr.pachka                  = pachka;
test_tr.stat_cor                = stat_cor;
test_tr.number_n[15..0]         = number_n[15..0];
test_tr.number_p[15..0]         = number_p[15..0];
test_tr.zap_delay[15..0]        = zap_delay[15..0];
test_tr.COR_DATA[15..0]         = COR_DATA[15..0];   
test_tr.COR_DATB[15..0]         = COR_DATA[15..0];   
test_tr.COR_DATC[15..0]         = COR_DATC[15..0];  
test_tr.COR_DATD[15..0]         = COR_DATD[15..0];   
test_tr.COR_DATE[15..0]         = COR_DATE[15..0];  
test_tr.COR_DATF[15..0]         = COR_DATF[15..0];   
test_tr.COR_DATG[15..0]         = COR_DATG[15..0];   
test_tr.COR_DATH[15..0]         = COR_DATH[15..0]; 

t_TXDout[3..0]       = test_tr.t_TXDout[3..0];
t_TXena              = test_tr.t_TXena;
t_DataField          = test_tr.t_DataField;
t_Lenght[15..0]      = test_tr.t_Lenght[15..0];
t_couTransmit[15..0] = test_tr.t_couTransmit[15..0];
t_FrameCheck         = test_tr.t_FrameCheck;
t_EndTrans           = test_tr.t_EndTrans;

-------------------------------------------------------------------------------------------
-- приемник канала связи 

rec_eth.RXD[3..0]     = RXD[3..0];
rec_eth.RX_DV         = RXDV;
rec_eth.RX_CLK        = RXCLK;
rec_eth.COL           = COL;
rec_eth.CRS           = CRS;
rec_eth.reset         = reset;
rec_eth.TXclk         = TXclk;

rec_eth.READY         = READY;
rec_eth.Saddr[47..0]  = Saddr[47..0];
rec_eth.p[3..0]       = Fp[3..0];
Rkop[3..0]            = rec_eth.Rkop[3..0];
Rdev_number[3..0]     = rec_eth.Rdev_number[3..0];             
Rstat_cor             = rec_eth.Rstat_cor;
Rpachka               = rec_eth.Rpachka;
Rcalibr               = rec_eth.Rcalibr;      
Rnumber_n[15..0]      = rec_eth.Rnumber_n[15..0];
Rnumber_p[15..0]      = rec_eth.Rnumber_p[15..0];        
Rzap_delay[15..0]     = rec_eth.Rzap_delay[15..0];                        
Daddr[47..0]          = rec_eth.Daddr[47..0];
CheckDes              = rec_eth.CheckDes;
Rcheck                = rec_eth.Rcheck;
Rok                   = rec_eth.Rok;
Rdestination          = rec_eth.Rdestination;
Raddr[15..0]          = rec_eth.Raddr[15..0]; 
Rdata[3..0]           = rec_eth.Rdata[3..0];
rg_DACA[15..0]        = rec_eth.rg_DACA[15..0];
rg_DACB[15..0]        = rec_eth.rg_DACB[15..0];
rg_DACC[15..0]        = rec_eth.rg_DACC[15..0];
rg_DACD[15..0]        = rec_eth.rg_DACD[15..0];
rg_DACE[15..0]        = rec_eth.rg_DACE[15..0];
rg_DACF[15..0]        = rec_eth.rg_DACF[15..0];      
rg_DACG[15..0]        = rec_eth.rg_DACG[15..0];
rg_DACH[15..0]        = rec_eth.rg_DACH[15..0];

foto_DACA[15..0]        = rec_eth.foto_DACA[15..0];
foto_DACB[15..0]        = rec_eth.foto_DACB[15..0];
foto_DACC[15..0]        = rec_eth.foto_DACC[15..0];
foto_DACD[15..0]        = rec_eth.foto_DACD[15..0];
foto_DACE[15..0]        = rec_eth.foto_DACE[15..0];
foto_DACF[15..0]        = rec_eth.foto_DACF[15..0];      
foto_DACG[15..0]        = rec_eth.foto_DACG[15..0];
foto_DACH[15..0]        = rec_eth.foto_DACH[15..0];

rg_DAC_ROFS[15..0]	  = rec_eth.rg_DAC_ROFS[15..0];
rg_DAC_BIAS[15..0]	  = rec_eth.rg_DAC_BIAS[15..0];


rec_eth.cou_rd_data[9..0]  = cou_rd_data[9..0];

data_ou_eth[31..0] = rec_eth.data_ou_eth[31..0];
data_in_eth[27..0] = rec_eth.data_in_eth[27..0];
waddr_eth[7..0]    = rec_eth.waddr_eth[7..0];
n_burst[1..0]	   = rec_eth.n_burst[1..0];
wren               = rec_eth.wren;

-- формирование запуска ответной передачи

en_reply.d    = CheckDes & !start_reply;
en_reply.ena  = Rcheck & Rok & ((Rkop[3..0] <= 8) #  (Rkop[3..0] == 13))                 			-- прием команды + данных для регистров
              # Rcheck & Rok & (Rkop[3..0] == 9) & (n_burst[1..0]==3) 		-- прием массива данных
              # end_cou_reply;
en_reply.clk  = RXCLK; 
en_reply.clrn = reset;

cou_reply[].d    = cou_reply[].q + 1; 
cou_reply[].clk  = RXCLK;
cou_reply[].clrn = en_reply; 

end_cou_reply    = (cou_reply[] == 15)   & ((Rkop[3..0] <= 8) #  (Rkop[3..0] == 13))
                 # (cou_reply[] == 2047) & (Rkop[3..0] == 9);

start_reply.d    = (cou_reply[] > 7)     & ((Rkop[3..0] <= 8) #  (Rkop[3..0] == 13))
                 # (cou_reply[] > 2040)  & (Rkop[3..0] == 9);
start_reply.clk  = RXCLK;
start_reply.clrn = en_reply;                  

----------------------------------------------------------------------------------------
-- ответная передача или чтение данных 
tr_eth.p_n[1..0]		 = p_n[1..0];
tr_eth.reset             = reset;
tr_eth.TXclk             = TXclk; 
tr_eth.start_reply       = start_reply # start_rmd;
tr_eth.Saddr[47..0]      = Saddr[47..0];
tr_eth.Daddr[47..0]      = Daddr[47..0];   
tr_eth.Rkop[3..0]        = Rkop[3..0];
tr_eth.Rdev_number[3..0] = Rdev_number[3..0];
tr_eth.Rstat_cor         = Rstat_cor;
tr_eth.Rpachka           = Rpachka;
tr_eth.Rcalibr           = Rcalibr;
tr_eth.Rnumber_n[15..0]  = Rnumber_n[15..0];
tr_eth.Rnumber_p[15..0]  = Rnumber_p[15..0];
tr_eth.Rzap_delay[15..0] = Rzap_delay[15..0];
tr_eth.rg_DACA[15..0]    = rg_DACA[15..0];
tr_eth.rg_DACB[15..0]    = rg_DACB[15..0];
tr_eth.rg_DACC[15..0]    = rg_DACC[15..0];
tr_eth.rg_DACD[15..0]    = rg_DACD[15..0];
tr_eth.rg_DACE[15..0]    = rg_DACE[15..0];
tr_eth.rg_DACF[15..0]    = rg_DACF[15..0];
tr_eth.rg_DACG[15..0]    = rg_DACG[15..0];
tr_eth.rg_DACH[15..0]    = rg_DACH[15..0];

tr_eth.foto_DACA[15..0]    = foto_DACA[15..0];
tr_eth.foto_DACB[15..0]    = foto_DACB[15..0];
tr_eth.foto_DACC[15..0]    = foto_DACC[15..0];
tr_eth.foto_DACD[15..0]    = foto_DACD[15..0];
tr_eth.foto_DACE[15..0]    = foto_DACE[15..0];
tr_eth.foto_DACF[15..0]    = foto_DACF[15..0];
tr_eth.foto_DACG[15..0]    = foto_DACG[15..0];
tr_eth.foto_DACH[15..0]    = foto_DACH[15..0];

tr_eth.rg_DAC_BIAS[15..0] = rg_DAC_BIAS[15..0];
tr_eth.rg_DAC_ROFS[15..0] = rg_DAC_ROFS[15..0];

tr_eth.send_md[7..0]     = data_bus_in[7..0];--test_data[];--Addr_drs[7..0];--cou_rdm[10..3];-- h"ff";

TXD[3..0]          = tr_eth.TXD[3..0];           
TXEN               = tr_eth.TXEN; 
EndTrans           = tr_eth.EndTrans; 
DestinationAddr    = tr_eth.DestinationAddr;
SourceAddr         = tr_eth.SourceAddr;
PacketLenth        = tr_eth.PacketLenth;
DataField          = tr_eth.DataField;
--enTransmit		   = tr_eth.enTransmit;
couTransmit[15..0] = tr_eth.couTransmit[15..0];
--StStream		   = tr_eth.StStream;
--StFrame			   = tr_eth.StFrame;
en_read_dm         = tr_eth.en_read_dm; 
--sm_t[2..0]		   = tr_eth.sm_t[2..0];
--CRC_ok			   = tr_eth.CRC_ok;
en_read_slow	   = tr_eth.en_read_slow;
en_read_adr		   = tr_eth.en_read_adr;	

--en_read_slow	   = gnd;
--en_read_adr		   = gnd;

END;