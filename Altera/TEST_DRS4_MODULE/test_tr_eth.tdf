

INCLUDE "eth_tx";

SUBDESIGN test_tr_eth 
 
(
reset                   : input ;  
TXclk                   : input ;
St_tx_test              : input ;
t_TXDout[3..0]          : output;
t_TXena                 : output;
t_DataField             : output;
t_Lenght[15..0]         : output;
t_couTransmit[15..0]    : output;
t_FrameCheck            : output;
t_EndTrans              : output;

Fp[3..0]                : input;

kop[3..0]               : input;
dev_number[3..0]        : input;
data_DACA[15..0]        : input;
data_DACB[15..0]        : input;
data_DACC[15..0]        : input;
data_DACD[15..0]        : input;
data_DACE[15..0]        : input;
data_DACF[15..0]        : input;
data_DACG[15..0]        : input;
data_DACH[15..0]        : input;
calibr                  : input;
pachka                  : input;
stat_cor                : input;
number_n[15..0]         : input;
number_p[15..0]         : input;
zap_delay[15..0]        : input;
COR_DATA[15..0]         : input;   
COR_DATB[15..0]         : input;   
COR_DATC[15..0]         : input;  
COR_DATD[15..0]         : input;   
COR_DATE[15..0]         : input;  
COR_DATF[15..0]         : input;   
COR_DATG[15..0]         : input;   
COR_DATH[15..0]         : input; 
--outdata_adc_slow[15..0] : input;        --!!!  данные читаются а не пишутся!

)

VARIABLE

t_Saddr[47..0]       : node;
t_Daddr[47..0]       : node;
t_Lenght_tr[15..0]   : node;
t_Lenght[15..0]      : node;
t_SendData[3..0]     : node;

------------------------------------------
Tr_t                 : eth_tx;
t_TXDout[3..0]       : node;
t_TXena              : node;
t_DestinationAddr    : node;
t_SourceAddr         : node;
t_PacketLenth        : node;
t_DataField          : node;
t_EndTrans           : node;
t_couTransmit[15..0] : node;
t_FrameCheck         : node;

BEGIN 

t_Daddr[47..0]    =  H"1a1a1a1a1a10";
t_Saddr[47..0]    =  H"bcbcbcbcbcbc";

t_Lenght_tr[15..0] = t_Lenght[15..0] + 18;     -- длину надо модифицировать в соответствии с t_cop[3..0]             
                                               -- RAMcor (RgDat[3..0] == 6) длина - 256 байт!!! 
                                               -- (t_cop[3..1] == 3) 
 if (kop[3..0] == 9) then                                               
 t_Lenght[15..0]    = H"0420"; 
else 
 t_Lenght[15..0]    = H"0040";
end if;                                                             

 --=====================================================================================================  
 -- Передатчик для отладки интерфейсного модуля 

Tr_t.clear           = reset;
Tr_t.Lenght[15..0]   = t_Lenght[15..0];                   
Tr_t.StTransmit      = St_tx_test;
Tr_t.tx_clk          = TXclk;
Tr_t.SendData[3..0]  = t_SendData[3..0];
   
t_TXDout[3..0]       = Tr_t.txd[3..0];
t_TXena              = Tr_t.tx_ena;
t_DestinationAddr    = Tr_t.DestinationAddr;
t_SourceAddr         = Tr_t.SourceAddr;
t_PacketLenth        = Tr_t.PacketLenth;
t_DataField          = Tr_t.DataField;
t_EndTrans           = Tr_t.EndTrans;
t_couTransmit[15..0] = Tr_t.couTransmit[];
t_FrameCheck         = Tr_t.FrameCheck; 

IF t_DestinationAddr THEN
   CASE t_couTransmit[3..0] IS
	 WHEN 0  => t_SendData[] = t_Daddr[43..40];               
	 WHEN 1  => t_SendData[] = t_Daddr[47..44];
	 WHEN 2  => t_SendData[] = t_Daddr[35..32];
	 WHEN 3  => t_SendData[] = t_Daddr[39..36];
	 WHEN 4  => t_SendData[] = t_Daddr[27..24];
	 WHEN 5  => t_SendData[] = t_Daddr[31..28];
	 WHEN 6  => t_SendData[] = t_Daddr[19..16];
	 WHEN 7  => t_SendData[] = t_Daddr[23..20];
	 WHEN 8  => t_SendData[] = t_Daddr[11..8];
	 WHEN 9  => t_SendData[] = t_Daddr[15..12];
	 WHEN 10 => t_SendData[] = Fp[3..0];
	 WHEN 11 => t_SendData[] = t_Daddr[7..4];
  END CASE;
END IF;

IF t_SourceAddr THEN
   CASE t_couTransmit[3..0] IS
	 WHEN 0  => t_SendData[] = t_Saddr[43..40];  
	 WHEN 1  => t_SendData[] = t_Saddr[47..44];
	 WHEN 2  => t_SendData[] = t_Saddr[35..32];
	 WHEN 3  => t_SendData[] = t_Saddr[39..36];
	 WHEN 4  => t_SendData[] = t_Saddr[27..24];
	 WHEN 5  => t_SendData[] = t_Saddr[31..28];
	 WHEN 6  => t_SendData[] = t_Saddr[19..16];
	 WHEN 7  => t_SendData[] = t_Saddr[23..20];
	 WHEN 8  => t_SendData[] = t_Saddr[11..8];
	 WHEN 9  => t_SendData[] = t_Saddr[15..12];
	 WHEN 10 => t_SendData[] = t_Saddr[3..0];
	 WHEN 11 => t_SendData[] = t_Saddr[7..4];
  END CASE;
END IF;

IF t_PacketLenth THEN
   CASE t_couTransmit[1..0] IS
	 WHEN 0  => t_SendData[] = t_Lenght_tr[11..8];
	 WHEN 1  => t_SendData[] = t_Lenght_tr[15..12];
	 WHEN 2  => t_SendData[] = t_Lenght_tr[3..0];
	 WHEN 3  => t_SendData[] = t_Lenght_tr[7..4];
   END CASE;
END IF;

IF t_DataField & (t_couTransmit[15..6] == 0) THEN      
   CASE t_couTransmit[5..0] IS
	 WHEN 0  => t_SendData[3..0] = kop[3..0];                                                  
	 WHEN 1  => t_SendData[3..0] = dev_number[3..0]; 
	 WHEN 2  => t_SendData[3..0] = (gnd,calibr,pachka,stat_cor);                                        
	 WHEN 3  => t_SendData[3..0] = (gnd,gnd,gnd,gnd);  
	                     
	 WHEN 4  => t_SendData[3..0] = number_n[3..0];
	 WHEN 5  => t_SendData[3..0] = number_n[7..4];
	 WHEN 6  => t_SendData[3..0] = number_n[11..8];
	 WHEN 7  => t_SendData[3..0] = number_n[15..12];
	 	                                                      
	 WHEN 8  => t_SendData[3..0] = number_p[3..0];
     WHEN 9  => t_SendData[3..0] = number_p[7..4];
	 WHEN 10 => t_SendData[3..0] = number_p[11..8];
	 WHEN 11 => t_SendData[3..0] = number_p[15..12];
	                                                             
	 WHEN 12 => t_SendData[3..0] = zap_delay[3..0];
	 WHEN 13 => t_SendData[3..0] = zap_delay[7..4];
	 WHEN 14 => t_SendData[3..0] = zap_delay[11..8];
	 WHEN 15 => t_SendData[3..0] = zap_delay[15..12];
	 
	 WHEN 16 => t_SendData[3..0] = data_DACA[3..0];
     WHEN 17 => t_SendData[3..0] = data_DACA[7..4];
     WHEN 18 => t_SendData[3..0] = data_DACA[11..8];
     WHEN 19 => t_SendData[3..0] = data_DACA[15..12]; 
     
     WHEN 20 => t_SendData[3..0] = data_DACB[3..0];
     WHEN 21 => t_SendData[3..0] = data_DACB[7..4];
     WHEN 22 => t_SendData[3..0] = data_DACB[11..8];
     WHEN 23 => t_SendData[3..0] = data_DACB[15..12]; 
     
     WHEN 24 => t_SendData[3..0] = data_DACC[3..0];
     WHEN 25 => t_SendData[3..0] = data_DACC[7..4];
     WHEN 26 => t_SendData[3..0] = data_DACC[11..8];
     WHEN 27 => t_SendData[3..0] = data_DACC[15..12]; 
     
     WHEN 28 => t_SendData[3..0] = data_DACD[3..0];
     WHEN 29 => t_SendData[3..0] = data_DACD[7..4];
     WHEN 30 => t_SendData[3..0] = data_DACD[11..8];
     WHEN 31 => t_SendData[3..0] = data_DACD[15..12]; 
	 
	 WHEN 32 => t_SendData[3..0] = data_DACE[3..0];
     WHEN 33 => t_SendData[3..0] = data_DACE[7..4];
     WHEN 34 => t_SendData[3..0] = data_DACE[11..8];
     WHEN 35 => t_SendData[3..0] = data_DACE[15..12]; 
     
     WHEN 36 => t_SendData[3..0] = data_DACF[3..0];
     WHEN 37 => t_SendData[3..0] = data_DACF[7..4];
     WHEN 38 => t_SendData[3..0] = data_DACF[11..8];
     WHEN 39 => t_SendData[3..0] = data_DACF[15..12]; 
     
     WHEN 40 => t_SendData[3..0] = data_DACG[3..0];
     WHEN 41 => t_SendData[3..0] = data_DACG[7..4];
     WHEN 42 => t_SendData[3..0] = data_DACG[11..8];
     WHEN 43 => t_SendData[3..0] = data_DACG[15..12]; 
     
     WHEN 44 => t_SendData[3..0] = data_DACH[3..0];
     WHEN 45 => t_SendData[3..0] = data_DACH[7..4];
     WHEN 47 => t_SendData[3..0] = data_DACH[11..8];
     WHEN 47 => t_SendData[3..0] = data_DACH[15..12]; 
     
--     WHEN 48 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 49 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 50 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 51 => t_SendData[3..0] = (gnd,gnd,gnd,gnd); 
     
--     WHEN 52 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 53 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 54 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 55 => t_SendData[3..0] = (gnd,gnd,gnd,gnd); 
     
--     WHEN 56 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 57 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 58 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 59 => t_SendData[3..0] = (gnd,gnd,gnd,gnd); 
     
--     WHEN 60 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 61 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 62 => t_SendData[3..0] = (gnd,gnd,gnd,gnd);
--     WHEN 63 => t_SendData[3..0] = (gnd,gnd,gnd,gnd); 
                             
   END CASE;
END IF;


IF	t_DataField  & !(t_couTransmit[15..6] == 0) THEN 
  CASE (t_couTransmit[1..0]) IS    
                                       
     WHEN 0   => t_SendData[3..0] = COR_DATA[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 0)      
                                  # COR_DATB[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 1)           
                                  # COR_DATC[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 2)          
                                  # COR_DATD[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 3)           
                                  # COR_DATE[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 4)          
                                  # COR_DATF[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 5)           
                                  # COR_DATG[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 6)           
                                  # COR_DATH[3..0] & (kop[3..0] == 9) & (dev_number[2..0] == 7);
                                                 
	 WHEN 1   => t_SendData[3..0] = COR_DATA[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 0)      
                                  # COR_DATB[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 1)           
                                  # COR_DATC[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 2)          
                                  # COR_DATD[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 3)           
                                  # COR_DATE[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 4)          
                                  # COR_DATF[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 5)           
                                  # COR_DATG[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 6)           
                                  # COR_DATH[7..4] & (kop[3..0] == 9) & (dev_number[2..0] == 7);
                                   
	 WHEN 2   => t_SendData[3..0] = COR_DATA[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 0)      
                                  # COR_DATB[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 1)           
                                  # COR_DATC[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 2)          
                                  # COR_DATD[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 3)           
                                  # COR_DATE[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 4)          
                                  # COR_DATF[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 5)           
                                  # COR_DATG[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 6)           
                                  # COR_DATH[11..8] & (kop[3..0] == 9) & (dev_number[2..0] == 7);
                                   
	 WHEN 3   => t_SendData[3..0] = COR_DATA[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 0)      
                                  # COR_DATB[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 1)           
                                  # COR_DATC[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 2)          
                                  # COR_DATD[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 3)           
                                  # COR_DATE[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 4)          
                                  # COR_DATF[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 5)           
                                  # COR_DATG[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 6)           
                                  # COR_DATH[15..12] & (kop[3..0] == 9) & (dev_number[2..0] == 7); 
    END CASE;                                                                     
END IF;	 



--IF	(t_cop[3..0] == 5) & t_DataField  & !(t_couTransmit[15..4] == 0) THEN
--  CASE (t_couTransmit[3..0]) IS
--     WHEN 0   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[27..24];              
--	 WHEN 1   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[31..28];
--	 WHEN 2   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[19..16];
--	 WHEN 3   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[23..20];
--	 WHEN 4   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[11..8];
--	 WHEN 5   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[15..12];
--	 WHEN 6   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[3..0];
--	 WHEN 7   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[7..4];
--	 WHEN 8   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[27..24]; 
--	 WHEN 9   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[31..28];
--	 WHEN 10  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[19..16];
--	 WHEN 11  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[23..20];
--	 WHEN 12  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[11..8];
--	 WHEN 13  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[15..12];
--	 WHEN 14  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[3..0];
--	 WHEN 15  => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_ADJreg[7..4];
--  END CASE;                                                                     
--END IF;

-- Load RAMini (64 24-х разрядных слова, 32*4 байта, 32*8 нибблов)

--t_RgDAP_RAM[31..0] = (gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,t_coud[]);

--t_coud[11..0].d    = t_coud[11..0].q + 1;
--t_coud[11..0].ena  = en_t_coud;
--t_coud[11..0].clk  = TXclk;
--t_coud[11..0].clrn = reset & !t_PacketLenth;

--IF	t_DataField  & !(t_couTransmit[15..4] == 0) THEN
                 
 -- CASE (t_couTransmit[3..0]) IS
 --    WHEN 0   => t_SendData[3..0] = (gnd,gnd,gnd,gnd); --t_RgDAP_RAM[3..0];              
--	 WHEN 1   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[7..4];
--	 WHEN 2   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[11..8];
--	 WHEN 3   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[15..12];
--	 WHEN 4   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[19..16];
--	 WHEN 5   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[23..20];
--	 WHEN 6   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[27..24];
--	 WHEN 7   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[31..28];
--	             en_t_coud = vcc;
--	 WHEN 8   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[3..0];
--	 WHEN 9   => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[7..4];
--	 WHEN 10  => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[11..8];
--	 WHEN 11  => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[15..12];
--	 WHEN 12  => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[19..16];
--	 WHEN 13  => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[23..20];
--	 WHEN 14  => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[27..24];
--	 WHEN 15  => t_SendData[3..0] = (gnd,gnd,gnd,gnd);--t_RgDAP_RAM[31..28];
--	             en_t_coud = vcc;
--  END CASE;                                                                     
--END IF;

END; 